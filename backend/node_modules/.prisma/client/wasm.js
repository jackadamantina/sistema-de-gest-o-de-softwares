
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  status: 'status',
  avatar: 'avatar',
  lastAccess: 'lastAccess',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SoftwareScalarFieldEnum = {
  id: 'id',
  servico: 'servico',
  description: 'description',
  url: 'url',
  hosting: 'hosting',
  acesso: 'acesso',
  responsible: 'responsible',
  namedUser: 'namedUser',
  integratedUser: 'integratedUser',
  sso: 'sso',
  onboarding: 'onboarding',
  offboarding: 'offboarding',
  offboardingType: 'offboardingType',
  affectedTeams: 'affectedTeams',
  logsInfo: 'logsInfo',
  logsRetention: 'logsRetention',
  mfaPolicy: 'mfaPolicy',
  mfa: 'mfa',
  mfaSMS: 'mfaSMS',
  regionBlock: 'regionBlock',
  passwordPolicy: 'passwordPolicy',
  sensitiveData: 'sensitiveData',
  criticidade: 'criticidade',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userName: 'userName',
  action: 'action',
  details: 'details',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  Admin: 'Admin',
  Editor: 'Editor',
  Visualizador: 'Visualizador'
};

exports.Status = exports.$Enums.Status = {
  Ativo: 'Ativo',
  Inativo: 'Inativo'
};

exports.Hosting = exports.$Enums.Hosting = {
  OnPremises: 'OnPremises',
  Cloud: 'Cloud',
  Cloudstack: 'Cloudstack',
  SaaSPublico: 'SaaSPublico'
};

exports.Acesso = exports.$Enums.Acesso = {
  Interno: 'Interno',
  Externo: 'Externo'
};

exports.NamedUser = exports.$Enums.NamedUser = {
  Sim: 'Sim',
  SemAutenticacao: 'SemAutenticacao',
  Nao: 'Nao'
};

exports.IntegratedUser = exports.$Enums.IntegratedUser = {
  Sim: 'Sim',
  Nao: 'Nao',
  Integrador: 'Integrador',
  Ambos: 'Ambos'
};

exports.SSO = exports.$Enums.SSO = {
  Aplicavel: 'Aplicavel',
  Integrado: 'Integrado',
  PossivelUpgrade: 'PossivelUpgrade',
  SemPossibilidade: 'SemPossibilidade',
  Desenvolver: 'Desenvolver'
};

exports.Offboarding = exports.$Enums.Offboarding = {
  RemoverManual: 'RemoverManual',
  RemocaoAutomatica: 'RemocaoAutomatica',
  NA: 'NA'
};

exports.OffboardingType = exports.$Enums.OffboardingType = {
  Alta: 'Alta',
  Media: 'Media',
  Baixa: 'Baixa'
};

exports.LogsInfo = exports.$Enums.LogsInfo = {
  LogsAcesso: 'LogsAcesso',
  LogsSistema: 'LogsSistema',
  Ambos: 'Ambos',
  NenhumLog: 'NenhumLog'
};

exports.LogsRetention = exports.$Enums.LogsRetention = {
  Nenhum: 'Nenhum',
  Semanal: 'Semanal',
  Mensal: 'Mensal',
  Diario: 'Diario'
};

exports.MFAPolicy = exports.$Enums.MFAPolicy = {
  Sim: 'Sim',
  Nao: 'Nao',
  NaoAplicavel: 'NaoAplicavel'
};

exports.MFA = exports.$Enums.MFA = {
  NaoTemPossibilidade: 'NaoTemPossibilidade',
  Habilitado: 'Habilitado',
  NaoAplicavel: 'NaoAplicavel'
};

exports.MFASMS = exports.$Enums.MFASMS = {
  Nao: 'Nao',
  Sim: 'Sim'
};

exports.RegionBlock = exports.$Enums.RegionBlock = {
  Sim: 'Sim',
  Nao: 'Nao',
  NaoAplicavel: 'NaoAplicavel',
  NaoPossuiFuncionalidade: 'NaoPossuiFuncionalidade'
};

exports.PasswordPolicy = exports.$Enums.PasswordPolicy = {
  Sim: 'Sim',
  Nao: 'Nao'
};

exports.SensitiveData = exports.$Enums.SensitiveData = {
  Sim: 'Sim',
  Nao: 'Nao'
};

exports.Criticidade = exports.$Enums.Criticidade = {
  Alta: 'Alta',
  Media: 'Media',
  Baixa: 'Baixa'
};

exports.LogType = exports.$Enums.LogType = {
  create: 'create',
  update: 'update',
  delete: 'delete',
  login: 'login',
  export: 'export',
  filter: 'filter'
};

exports.Prisma.ModelName = {
  User: 'User',
  Software: 'Software',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
