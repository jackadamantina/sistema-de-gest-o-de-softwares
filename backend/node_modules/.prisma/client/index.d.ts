
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Software
 * 
 */
export type Software = $Result.DefaultSelection<Prisma.$SoftwarePayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  Admin: 'Admin',
  Editor: 'Editor',
  Visualizador: 'Visualizador'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Status: {
  Ativo: 'Ativo',
  Inativo: 'Inativo'
};

export type Status = (typeof Status)[keyof typeof Status]


export const Hosting: {
  OnPremises: 'OnPremises',
  Cloud: 'Cloud',
  Cloudstack: 'Cloudstack',
  SaaSPublico: 'SaaSPublico'
};

export type Hosting = (typeof Hosting)[keyof typeof Hosting]


export const Acesso: {
  Interno: 'Interno',
  Externo: 'Externo'
};

export type Acesso = (typeof Acesso)[keyof typeof Acesso]


export const NamedUser: {
  Sim: 'Sim',
  SemAutenticacao: 'SemAutenticacao',
  Nao: 'Nao'
};

export type NamedUser = (typeof NamedUser)[keyof typeof NamedUser]


export const IntegratedUser: {
  Sim: 'Sim',
  Nao: 'Nao',
  Integrador: 'Integrador',
  Ambos: 'Ambos'
};

export type IntegratedUser = (typeof IntegratedUser)[keyof typeof IntegratedUser]


export const SSO: {
  Aplicavel: 'Aplicavel',
  Integrado: 'Integrado',
  PossivelUpgrade: 'PossivelUpgrade',
  SemPossibilidade: 'SemPossibilidade',
  Desenvolver: 'Desenvolver'
};

export type SSO = (typeof SSO)[keyof typeof SSO]


export const Offboarding: {
  RemoverManual: 'RemoverManual',
  RemocaoAutomatica: 'RemocaoAutomatica',
  NA: 'NA'
};

export type Offboarding = (typeof Offboarding)[keyof typeof Offboarding]


export const OffboardingType: {
  Alta: 'Alta',
  Media: 'Media',
  Baixa: 'Baixa'
};

export type OffboardingType = (typeof OffboardingType)[keyof typeof OffboardingType]


export const LogsInfo: {
  LogsAcesso: 'LogsAcesso',
  LogsSistema: 'LogsSistema',
  Ambos: 'Ambos',
  NenhumLog: 'NenhumLog'
};

export type LogsInfo = (typeof LogsInfo)[keyof typeof LogsInfo]


export const LogsRetention: {
  Nenhum: 'Nenhum',
  Semanal: 'Semanal',
  Mensal: 'Mensal',
  Diario: 'Diario'
};

export type LogsRetention = (typeof LogsRetention)[keyof typeof LogsRetention]


export const MFAPolicy: {
  Sim: 'Sim',
  Nao: 'Nao',
  NaoAplicavel: 'NaoAplicavel'
};

export type MFAPolicy = (typeof MFAPolicy)[keyof typeof MFAPolicy]


export const MFA: {
  NaoTemPossibilidade: 'NaoTemPossibilidade',
  Habilitado: 'Habilitado',
  NaoAplicavel: 'NaoAplicavel'
};

export type MFA = (typeof MFA)[keyof typeof MFA]


export const MFASMS: {
  Nao: 'Nao',
  Sim: 'Sim'
};

export type MFASMS = (typeof MFASMS)[keyof typeof MFASMS]


export const RegionBlock: {
  Sim: 'Sim',
  Nao: 'Nao',
  NaoAplicavel: 'NaoAplicavel',
  NaoPossuiFuncionalidade: 'NaoPossuiFuncionalidade'
};

export type RegionBlock = (typeof RegionBlock)[keyof typeof RegionBlock]


export const PasswordPolicy: {
  Sim: 'Sim',
  Nao: 'Nao'
};

export type PasswordPolicy = (typeof PasswordPolicy)[keyof typeof PasswordPolicy]


export const SensitiveData: {
  Sim: 'Sim',
  Nao: 'Nao'
};

export type SensitiveData = (typeof SensitiveData)[keyof typeof SensitiveData]


export const Criticidade: {
  Alta: 'Alta',
  Media: 'Media',
  Baixa: 'Baixa'
};

export type Criticidade = (typeof Criticidade)[keyof typeof Criticidade]


export const LogType: {
  create: 'create',
  update: 'update',
  delete: 'delete',
  login: 'login',
  export: 'export',
  filter: 'filter'
};

export type LogType = (typeof LogType)[keyof typeof LogType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type Hosting = $Enums.Hosting

export const Hosting: typeof $Enums.Hosting

export type Acesso = $Enums.Acesso

export const Acesso: typeof $Enums.Acesso

export type NamedUser = $Enums.NamedUser

export const NamedUser: typeof $Enums.NamedUser

export type IntegratedUser = $Enums.IntegratedUser

export const IntegratedUser: typeof $Enums.IntegratedUser

export type SSO = $Enums.SSO

export const SSO: typeof $Enums.SSO

export type Offboarding = $Enums.Offboarding

export const Offboarding: typeof $Enums.Offboarding

export type OffboardingType = $Enums.OffboardingType

export const OffboardingType: typeof $Enums.OffboardingType

export type LogsInfo = $Enums.LogsInfo

export const LogsInfo: typeof $Enums.LogsInfo

export type LogsRetention = $Enums.LogsRetention

export const LogsRetention: typeof $Enums.LogsRetention

export type MFAPolicy = $Enums.MFAPolicy

export const MFAPolicy: typeof $Enums.MFAPolicy

export type MFA = $Enums.MFA

export const MFA: typeof $Enums.MFA

export type MFASMS = $Enums.MFASMS

export const MFASMS: typeof $Enums.MFASMS

export type RegionBlock = $Enums.RegionBlock

export const RegionBlock: typeof $Enums.RegionBlock

export type PasswordPolicy = $Enums.PasswordPolicy

export const PasswordPolicy: typeof $Enums.PasswordPolicy

export type SensitiveData = $Enums.SensitiveData

export const SensitiveData: typeof $Enums.SensitiveData

export type Criticidade = $Enums.Criticidade

export const Criticidade: typeof $Enums.Criticidade

export type LogType = $Enums.LogType

export const LogType: typeof $Enums.LogType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.software`: Exposes CRUD operations for the **Software** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Software
    * const software = await prisma.software.findMany()
    * ```
    */
  get software(): Prisma.SoftwareDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Software: 'Software',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "software" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Software: {
        payload: Prisma.$SoftwarePayload<ExtArgs>
        fields: Prisma.SoftwareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoftwareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoftwareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          findFirst: {
            args: Prisma.SoftwareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoftwareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          findMany: {
            args: Prisma.SoftwareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>[]
          }
          create: {
            args: Prisma.SoftwareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          createMany: {
            args: Prisma.SoftwareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SoftwareCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>[]
          }
          delete: {
            args: Prisma.SoftwareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          update: {
            args: Prisma.SoftwareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          deleteMany: {
            args: Prisma.SoftwareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoftwareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SoftwareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          aggregate: {
            args: Prisma.SoftwareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoftware>
          }
          groupBy: {
            args: Prisma.SoftwareGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoftwareGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoftwareCountArgs<ExtArgs>
            result: $Utils.Optional<SoftwareCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdSoftwares: number
    updatedSoftwares: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdSoftwares?: boolean | UserCountOutputTypeCountCreatedSoftwaresArgs
    updatedSoftwares?: boolean | UserCountOutputTypeCountUpdatedSoftwaresArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedSoftwaresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedSoftwaresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    status: $Enums.Status | null
    avatar: string | null
    lastAccess: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    status: $Enums.Status | null
    avatar: string | null
    lastAccess: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    passwordHash: number
    role: number
    status: number
    avatar: number
    lastAccess: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    passwordHash?: true
    role?: true
    status?: true
    avatar?: true
    lastAccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    passwordHash?: true
    role?: true
    status?: true
    avatar?: true
    lastAccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    passwordHash?: true
    role?: true
    status?: true
    avatar?: true
    lastAccess?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status: $Enums.Status
    avatar: string | null
    lastAccess: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    avatar?: boolean
    lastAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdSoftwares?: boolean | User$createdSoftwaresArgs<ExtArgs>
    updatedSoftwares?: boolean | User$updatedSoftwaresArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    avatar?: boolean
    lastAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    avatar?: boolean
    lastAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdSoftwares?: boolean | User$createdSoftwaresArgs<ExtArgs>
    updatedSoftwares?: boolean | User$updatedSoftwaresArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdSoftwares: Prisma.$SoftwarePayload<ExtArgs>[]
      updatedSoftwares: Prisma.$SoftwarePayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      passwordHash: string
      role: $Enums.Role
      status: $Enums.Status
      avatar: string | null
      lastAccess: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdSoftwares<T extends User$createdSoftwaresArgs<ExtArgs> = {}>(args?: Subset<T, User$createdSoftwaresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findMany"> | Null>
    updatedSoftwares<T extends User$updatedSoftwaresArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedSoftwaresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly status: FieldRef<"User", 'Status'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly lastAccess: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.createdSoftwares
   */
  export type User$createdSoftwaresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    where?: SoftwareWhereInput
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    cursor?: SoftwareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * User.updatedSoftwares
   */
  export type User$updatedSoftwaresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    where?: SoftwareWhereInput
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    cursor?: SoftwareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Software
   */

  export type AggregateSoftware = {
    _count: SoftwareCountAggregateOutputType | null
    _min: SoftwareMinAggregateOutputType | null
    _max: SoftwareMaxAggregateOutputType | null
  }

  export type SoftwareMinAggregateOutputType = {
    id: string | null
    servico: string | null
    description: string | null
    url: string | null
    hosting: $Enums.Hosting | null
    acesso: $Enums.Acesso | null
    responsible: string | null
    namedUser: $Enums.NamedUser | null
    integratedUser: $Enums.IntegratedUser | null
    sso: $Enums.SSO | null
    onboarding: string | null
    offboarding: $Enums.Offboarding | null
    offboardingType: $Enums.OffboardingType | null
    logsInfo: $Enums.LogsInfo | null
    logsRetention: $Enums.LogsRetention | null
    mfaPolicy: $Enums.MFAPolicy | null
    mfa: $Enums.MFA | null
    mfaSMS: $Enums.MFASMS | null
    regionBlock: $Enums.RegionBlock | null
    passwordPolicy: $Enums.PasswordPolicy | null
    sensitiveData: $Enums.SensitiveData | null
    criticidade: $Enums.Criticidade | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    updatedBy: string | null
  }

  export type SoftwareMaxAggregateOutputType = {
    id: string | null
    servico: string | null
    description: string | null
    url: string | null
    hosting: $Enums.Hosting | null
    acesso: $Enums.Acesso | null
    responsible: string | null
    namedUser: $Enums.NamedUser | null
    integratedUser: $Enums.IntegratedUser | null
    sso: $Enums.SSO | null
    onboarding: string | null
    offboarding: $Enums.Offboarding | null
    offboardingType: $Enums.OffboardingType | null
    logsInfo: $Enums.LogsInfo | null
    logsRetention: $Enums.LogsRetention | null
    mfaPolicy: $Enums.MFAPolicy | null
    mfa: $Enums.MFA | null
    mfaSMS: $Enums.MFASMS | null
    regionBlock: $Enums.RegionBlock | null
    passwordPolicy: $Enums.PasswordPolicy | null
    sensitiveData: $Enums.SensitiveData | null
    criticidade: $Enums.Criticidade | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    updatedBy: string | null
  }

  export type SoftwareCountAggregateOutputType = {
    id: number
    servico: number
    description: number
    url: number
    hosting: number
    acesso: number
    responsible: number
    namedUser: number
    integratedUser: number
    sso: number
    onboarding: number
    offboarding: number
    offboardingType: number
    affectedTeams: number
    logsInfo: number
    logsRetention: number
    mfaPolicy: number
    mfa: number
    mfaSMS: number
    regionBlock: number
    passwordPolicy: number
    sensitiveData: number
    criticidade: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type SoftwareMinAggregateInputType = {
    id?: true
    servico?: true
    description?: true
    url?: true
    hosting?: true
    acesso?: true
    responsible?: true
    namedUser?: true
    integratedUser?: true
    sso?: true
    onboarding?: true
    offboarding?: true
    offboardingType?: true
    logsInfo?: true
    logsRetention?: true
    mfaPolicy?: true
    mfa?: true
    mfaSMS?: true
    regionBlock?: true
    passwordPolicy?: true
    sensitiveData?: true
    criticidade?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type SoftwareMaxAggregateInputType = {
    id?: true
    servico?: true
    description?: true
    url?: true
    hosting?: true
    acesso?: true
    responsible?: true
    namedUser?: true
    integratedUser?: true
    sso?: true
    onboarding?: true
    offboarding?: true
    offboardingType?: true
    logsInfo?: true
    logsRetention?: true
    mfaPolicy?: true
    mfa?: true
    mfaSMS?: true
    regionBlock?: true
    passwordPolicy?: true
    sensitiveData?: true
    criticidade?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type SoftwareCountAggregateInputType = {
    id?: true
    servico?: true
    description?: true
    url?: true
    hosting?: true
    acesso?: true
    responsible?: true
    namedUser?: true
    integratedUser?: true
    sso?: true
    onboarding?: true
    offboarding?: true
    offboardingType?: true
    affectedTeams?: true
    logsInfo?: true
    logsRetention?: true
    mfaPolicy?: true
    mfa?: true
    mfaSMS?: true
    regionBlock?: true
    passwordPolicy?: true
    sensitiveData?: true
    criticidade?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type SoftwareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Software to aggregate.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Software
    **/
    _count?: true | SoftwareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoftwareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoftwareMaxAggregateInputType
  }

  export type GetSoftwareAggregateType<T extends SoftwareAggregateArgs> = {
        [P in keyof T & keyof AggregateSoftware]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoftware[P]>
      : GetScalarType<T[P], AggregateSoftware[P]>
  }




  export type SoftwareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareWhereInput
    orderBy?: SoftwareOrderByWithAggregationInput | SoftwareOrderByWithAggregationInput[]
    by: SoftwareScalarFieldEnum[] | SoftwareScalarFieldEnum
    having?: SoftwareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoftwareCountAggregateInputType | true
    _min?: SoftwareMinAggregateInputType
    _max?: SoftwareMaxAggregateInputType
  }

  export type SoftwareGroupByOutputType = {
    id: string
    servico: string
    description: string | null
    url: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible: string | null
    namedUser: $Enums.NamedUser | null
    integratedUser: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding: string | null
    offboarding: $Enums.Offboarding | null
    offboardingType: $Enums.OffboardingType | null
    affectedTeams: string[]
    logsInfo: $Enums.LogsInfo | null
    logsRetention: $Enums.LogsRetention | null
    mfaPolicy: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS: $Enums.MFASMS | null
    regionBlock: $Enums.RegionBlock | null
    passwordPolicy: $Enums.PasswordPolicy | null
    sensitiveData: $Enums.SensitiveData | null
    criticidade: $Enums.Criticidade
    createdAt: Date
    updatedAt: Date
    createdBy: string | null
    updatedBy: string | null
    _count: SoftwareCountAggregateOutputType | null
    _min: SoftwareMinAggregateOutputType | null
    _max: SoftwareMaxAggregateOutputType | null
  }

  type GetSoftwareGroupByPayload<T extends SoftwareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoftwareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoftwareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoftwareGroupByOutputType[P]>
            : GetScalarType<T[P], SoftwareGroupByOutputType[P]>
        }
      >
    >


  export type SoftwareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    servico?: boolean
    description?: boolean
    url?: boolean
    hosting?: boolean
    acesso?: boolean
    responsible?: boolean
    namedUser?: boolean
    integratedUser?: boolean
    sso?: boolean
    onboarding?: boolean
    offboarding?: boolean
    offboardingType?: boolean
    affectedTeams?: boolean
    logsInfo?: boolean
    logsRetention?: boolean
    mfaPolicy?: boolean
    mfa?: boolean
    mfaSMS?: boolean
    regionBlock?: boolean
    passwordPolicy?: boolean
    sensitiveData?: boolean
    criticidade?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    creator?: boolean | Software$creatorArgs<ExtArgs>
    updater?: boolean | Software$updaterArgs<ExtArgs>
  }, ExtArgs["result"]["software"]>

  export type SoftwareSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    servico?: boolean
    description?: boolean
    url?: boolean
    hosting?: boolean
    acesso?: boolean
    responsible?: boolean
    namedUser?: boolean
    integratedUser?: boolean
    sso?: boolean
    onboarding?: boolean
    offboarding?: boolean
    offboardingType?: boolean
    affectedTeams?: boolean
    logsInfo?: boolean
    logsRetention?: boolean
    mfaPolicy?: boolean
    mfa?: boolean
    mfaSMS?: boolean
    regionBlock?: boolean
    passwordPolicy?: boolean
    sensitiveData?: boolean
    criticidade?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    creator?: boolean | Software$creatorArgs<ExtArgs>
    updater?: boolean | Software$updaterArgs<ExtArgs>
  }, ExtArgs["result"]["software"]>

  export type SoftwareSelectScalar = {
    id?: boolean
    servico?: boolean
    description?: boolean
    url?: boolean
    hosting?: boolean
    acesso?: boolean
    responsible?: boolean
    namedUser?: boolean
    integratedUser?: boolean
    sso?: boolean
    onboarding?: boolean
    offboarding?: boolean
    offboardingType?: boolean
    affectedTeams?: boolean
    logsInfo?: boolean
    logsRetention?: boolean
    mfaPolicy?: boolean
    mfa?: boolean
    mfaSMS?: boolean
    regionBlock?: boolean
    passwordPolicy?: boolean
    sensitiveData?: boolean
    criticidade?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type SoftwareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Software$creatorArgs<ExtArgs>
    updater?: boolean | Software$updaterArgs<ExtArgs>
  }
  export type SoftwareIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Software$creatorArgs<ExtArgs>
    updater?: boolean | Software$updaterArgs<ExtArgs>
  }

  export type $SoftwarePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Software"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs> | null
      updater: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      servico: string
      description: string | null
      url: string | null
      hosting: $Enums.Hosting
      acesso: $Enums.Acesso
      responsible: string | null
      namedUser: $Enums.NamedUser | null
      integratedUser: $Enums.IntegratedUser | null
      sso: $Enums.SSO
      onboarding: string | null
      offboarding: $Enums.Offboarding | null
      offboardingType: $Enums.OffboardingType | null
      affectedTeams: string[]
      logsInfo: $Enums.LogsInfo | null
      logsRetention: $Enums.LogsRetention | null
      mfaPolicy: $Enums.MFAPolicy | null
      mfa: $Enums.MFA
      mfaSMS: $Enums.MFASMS | null
      regionBlock: $Enums.RegionBlock | null
      passwordPolicy: $Enums.PasswordPolicy | null
      sensitiveData: $Enums.SensitiveData | null
      criticidade: $Enums.Criticidade
      createdAt: Date
      updatedAt: Date
      createdBy: string | null
      updatedBy: string | null
    }, ExtArgs["result"]["software"]>
    composites: {}
  }

  type SoftwareGetPayload<S extends boolean | null | undefined | SoftwareDefaultArgs> = $Result.GetResult<Prisma.$SoftwarePayload, S>

  type SoftwareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SoftwareFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SoftwareCountAggregateInputType | true
    }

  export interface SoftwareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Software'], meta: { name: 'Software' } }
    /**
     * Find zero or one Software that matches the filter.
     * @param {SoftwareFindUniqueArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoftwareFindUniqueArgs>(args: SelectSubset<T, SoftwareFindUniqueArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Software that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SoftwareFindUniqueOrThrowArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoftwareFindUniqueOrThrowArgs>(args: SelectSubset<T, SoftwareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Software that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareFindFirstArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoftwareFindFirstArgs>(args?: SelectSubset<T, SoftwareFindFirstArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Software that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareFindFirstOrThrowArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoftwareFindFirstOrThrowArgs>(args?: SelectSubset<T, SoftwareFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Software that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Software
     * const software = await prisma.software.findMany()
     * 
     * // Get first 10 Software
     * const software = await prisma.software.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const softwareWithIdOnly = await prisma.software.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoftwareFindManyArgs>(args?: SelectSubset<T, SoftwareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Software.
     * @param {SoftwareCreateArgs} args - Arguments to create a Software.
     * @example
     * // Create one Software
     * const Software = await prisma.software.create({
     *   data: {
     *     // ... data to create a Software
     *   }
     * })
     * 
     */
    create<T extends SoftwareCreateArgs>(args: SelectSubset<T, SoftwareCreateArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Software.
     * @param {SoftwareCreateManyArgs} args - Arguments to create many Software.
     * @example
     * // Create many Software
     * const software = await prisma.software.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoftwareCreateManyArgs>(args?: SelectSubset<T, SoftwareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Software and returns the data saved in the database.
     * @param {SoftwareCreateManyAndReturnArgs} args - Arguments to create many Software.
     * @example
     * // Create many Software
     * const software = await prisma.software.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Software and only return the `id`
     * const softwareWithIdOnly = await prisma.software.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SoftwareCreateManyAndReturnArgs>(args?: SelectSubset<T, SoftwareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Software.
     * @param {SoftwareDeleteArgs} args - Arguments to delete one Software.
     * @example
     * // Delete one Software
     * const Software = await prisma.software.delete({
     *   where: {
     *     // ... filter to delete one Software
     *   }
     * })
     * 
     */
    delete<T extends SoftwareDeleteArgs>(args: SelectSubset<T, SoftwareDeleteArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Software.
     * @param {SoftwareUpdateArgs} args - Arguments to update one Software.
     * @example
     * // Update one Software
     * const software = await prisma.software.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoftwareUpdateArgs>(args: SelectSubset<T, SoftwareUpdateArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Software.
     * @param {SoftwareDeleteManyArgs} args - Arguments to filter Software to delete.
     * @example
     * // Delete a few Software
     * const { count } = await prisma.software.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoftwareDeleteManyArgs>(args?: SelectSubset<T, SoftwareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Software
     * const software = await prisma.software.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoftwareUpdateManyArgs>(args: SelectSubset<T, SoftwareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Software.
     * @param {SoftwareUpsertArgs} args - Arguments to update or create a Software.
     * @example
     * // Update or create a Software
     * const software = await prisma.software.upsert({
     *   create: {
     *     // ... data to create a Software
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Software we want to update
     *   }
     * })
     */
    upsert<T extends SoftwareUpsertArgs>(args: SelectSubset<T, SoftwareUpsertArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCountArgs} args - Arguments to filter Software to count.
     * @example
     * // Count the number of Software
     * const count = await prisma.software.count({
     *   where: {
     *     // ... the filter for the Software we want to count
     *   }
     * })
    **/
    count<T extends SoftwareCountArgs>(
      args?: Subset<T, SoftwareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoftwareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoftwareAggregateArgs>(args: Subset<T, SoftwareAggregateArgs>): Prisma.PrismaPromise<GetSoftwareAggregateType<T>>

    /**
     * Group by Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoftwareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoftwareGroupByArgs['orderBy'] }
        : { orderBy?: SoftwareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoftwareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoftwareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Software model
   */
  readonly fields: SoftwareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Software.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoftwareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends Software$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Software$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    updater<T extends Software$updaterArgs<ExtArgs> = {}>(args?: Subset<T, Software$updaterArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Software model
   */ 
  interface SoftwareFieldRefs {
    readonly id: FieldRef<"Software", 'String'>
    readonly servico: FieldRef<"Software", 'String'>
    readonly description: FieldRef<"Software", 'String'>
    readonly url: FieldRef<"Software", 'String'>
    readonly hosting: FieldRef<"Software", 'Hosting'>
    readonly acesso: FieldRef<"Software", 'Acesso'>
    readonly responsible: FieldRef<"Software", 'String'>
    readonly namedUser: FieldRef<"Software", 'NamedUser'>
    readonly integratedUser: FieldRef<"Software", 'IntegratedUser'>
    readonly sso: FieldRef<"Software", 'SSO'>
    readonly onboarding: FieldRef<"Software", 'String'>
    readonly offboarding: FieldRef<"Software", 'Offboarding'>
    readonly offboardingType: FieldRef<"Software", 'OffboardingType'>
    readonly affectedTeams: FieldRef<"Software", 'String[]'>
    readonly logsInfo: FieldRef<"Software", 'LogsInfo'>
    readonly logsRetention: FieldRef<"Software", 'LogsRetention'>
    readonly mfaPolicy: FieldRef<"Software", 'MFAPolicy'>
    readonly mfa: FieldRef<"Software", 'MFA'>
    readonly mfaSMS: FieldRef<"Software", 'MFASMS'>
    readonly regionBlock: FieldRef<"Software", 'RegionBlock'>
    readonly passwordPolicy: FieldRef<"Software", 'PasswordPolicy'>
    readonly sensitiveData: FieldRef<"Software", 'SensitiveData'>
    readonly criticidade: FieldRef<"Software", 'Criticidade'>
    readonly createdAt: FieldRef<"Software", 'DateTime'>
    readonly updatedAt: FieldRef<"Software", 'DateTime'>
    readonly createdBy: FieldRef<"Software", 'String'>
    readonly updatedBy: FieldRef<"Software", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Software findUnique
   */
  export type SoftwareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software findUniqueOrThrow
   */
  export type SoftwareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software findFirst
   */
  export type SoftwareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Software.
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Software.
     */
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Software findFirstOrThrow
   */
  export type SoftwareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Software.
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Software.
     */
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Software findMany
   */
  export type SoftwareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Software.
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Software create
   */
  export type SoftwareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * The data needed to create a Software.
     */
    data: XOR<SoftwareCreateInput, SoftwareUncheckedCreateInput>
  }

  /**
   * Software createMany
   */
  export type SoftwareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Software.
     */
    data: SoftwareCreateManyInput | SoftwareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Software createManyAndReturn
   */
  export type SoftwareCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Software.
     */
    data: SoftwareCreateManyInput | SoftwareCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Software update
   */
  export type SoftwareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * The data needed to update a Software.
     */
    data: XOR<SoftwareUpdateInput, SoftwareUncheckedUpdateInput>
    /**
     * Choose, which Software to update.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software updateMany
   */
  export type SoftwareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Software.
     */
    data: XOR<SoftwareUpdateManyMutationInput, SoftwareUncheckedUpdateManyInput>
    /**
     * Filter which Software to update
     */
    where?: SoftwareWhereInput
  }

  /**
   * Software upsert
   */
  export type SoftwareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * The filter to search for the Software to update in case it exists.
     */
    where: SoftwareWhereUniqueInput
    /**
     * In case the Software found by the `where` argument doesn't exist, create a new Software with this data.
     */
    create: XOR<SoftwareCreateInput, SoftwareUncheckedCreateInput>
    /**
     * In case the Software was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoftwareUpdateInput, SoftwareUncheckedUpdateInput>
  }

  /**
   * Software delete
   */
  export type SoftwareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter which Software to delete.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software deleteMany
   */
  export type SoftwareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Software to delete
     */
    where?: SoftwareWhereInput
  }

  /**
   * Software.creator
   */
  export type Software$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Software.updater
   */
  export type Software$updaterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Software without action
   */
  export type SoftwareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    userName: string | null
    action: string | null
    details: string | null
    type: $Enums.LogType | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    userName: string | null
    action: string | null
    details: string | null
    type: $Enums.LogType | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    userName: number
    action: number
    details: number
    type: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    type?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    type?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    type?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string | null
    userName: string
    action: string
    details: string
    type: $Enums.LogType
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    type?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    type?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    type?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      userName: string
      action: string
      details: string
      type: $Enums.LogType
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly userName: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'String'>
    readonly type: FieldRef<"AuditLog", 'LogType'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    status: 'status',
    avatar: 'avatar',
    lastAccess: 'lastAccess',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SoftwareScalarFieldEnum: {
    id: 'id',
    servico: 'servico',
    description: 'description',
    url: 'url',
    hosting: 'hosting',
    acesso: 'acesso',
    responsible: 'responsible',
    namedUser: 'namedUser',
    integratedUser: 'integratedUser',
    sso: 'sso',
    onboarding: 'onboarding',
    offboarding: 'offboarding',
    offboardingType: 'offboardingType',
    affectedTeams: 'affectedTeams',
    logsInfo: 'logsInfo',
    logsRetention: 'logsRetention',
    mfaPolicy: 'mfaPolicy',
    mfa: 'mfa',
    mfaSMS: 'mfaSMS',
    regionBlock: 'regionBlock',
    passwordPolicy: 'passwordPolicy',
    sensitiveData: 'sensitiveData',
    criticidade: 'criticidade',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type SoftwareScalarFieldEnum = (typeof SoftwareScalarFieldEnum)[keyof typeof SoftwareScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    userName: 'userName',
    action: 'action',
    details: 'details',
    type: 'type',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Hosting'
   */
  export type EnumHostingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Hosting'>
    


  /**
   * Reference to a field of type 'Hosting[]'
   */
  export type ListEnumHostingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Hosting[]'>
    


  /**
   * Reference to a field of type 'Acesso'
   */
  export type EnumAcessoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Acesso'>
    


  /**
   * Reference to a field of type 'Acesso[]'
   */
  export type ListEnumAcessoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Acesso[]'>
    


  /**
   * Reference to a field of type 'NamedUser'
   */
  export type EnumNamedUserFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NamedUser'>
    


  /**
   * Reference to a field of type 'NamedUser[]'
   */
  export type ListEnumNamedUserFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NamedUser[]'>
    


  /**
   * Reference to a field of type 'IntegratedUser'
   */
  export type EnumIntegratedUserFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IntegratedUser'>
    


  /**
   * Reference to a field of type 'IntegratedUser[]'
   */
  export type ListEnumIntegratedUserFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IntegratedUser[]'>
    


  /**
   * Reference to a field of type 'SSO'
   */
  export type EnumSSOFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SSO'>
    


  /**
   * Reference to a field of type 'SSO[]'
   */
  export type ListEnumSSOFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SSO[]'>
    


  /**
   * Reference to a field of type 'Offboarding'
   */
  export type EnumOffboardingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Offboarding'>
    


  /**
   * Reference to a field of type 'Offboarding[]'
   */
  export type ListEnumOffboardingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Offboarding[]'>
    


  /**
   * Reference to a field of type 'OffboardingType'
   */
  export type EnumOffboardingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OffboardingType'>
    


  /**
   * Reference to a field of type 'OffboardingType[]'
   */
  export type ListEnumOffboardingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OffboardingType[]'>
    


  /**
   * Reference to a field of type 'LogsInfo'
   */
  export type EnumLogsInfoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogsInfo'>
    


  /**
   * Reference to a field of type 'LogsInfo[]'
   */
  export type ListEnumLogsInfoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogsInfo[]'>
    


  /**
   * Reference to a field of type 'LogsRetention'
   */
  export type EnumLogsRetentionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogsRetention'>
    


  /**
   * Reference to a field of type 'LogsRetention[]'
   */
  export type ListEnumLogsRetentionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogsRetention[]'>
    


  /**
   * Reference to a field of type 'MFAPolicy'
   */
  export type EnumMFAPolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MFAPolicy'>
    


  /**
   * Reference to a field of type 'MFAPolicy[]'
   */
  export type ListEnumMFAPolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MFAPolicy[]'>
    


  /**
   * Reference to a field of type 'MFA'
   */
  export type EnumMFAFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MFA'>
    


  /**
   * Reference to a field of type 'MFA[]'
   */
  export type ListEnumMFAFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MFA[]'>
    


  /**
   * Reference to a field of type 'MFASMS'
   */
  export type EnumMFASMSFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MFASMS'>
    


  /**
   * Reference to a field of type 'MFASMS[]'
   */
  export type ListEnumMFASMSFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MFASMS[]'>
    


  /**
   * Reference to a field of type 'RegionBlock'
   */
  export type EnumRegionBlockFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RegionBlock'>
    


  /**
   * Reference to a field of type 'RegionBlock[]'
   */
  export type ListEnumRegionBlockFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RegionBlock[]'>
    


  /**
   * Reference to a field of type 'PasswordPolicy'
   */
  export type EnumPasswordPolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PasswordPolicy'>
    


  /**
   * Reference to a field of type 'PasswordPolicy[]'
   */
  export type ListEnumPasswordPolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PasswordPolicy[]'>
    


  /**
   * Reference to a field of type 'SensitiveData'
   */
  export type EnumSensitiveDataFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SensitiveData'>
    


  /**
   * Reference to a field of type 'SensitiveData[]'
   */
  export type ListEnumSensitiveDataFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SensitiveData[]'>
    


  /**
   * Reference to a field of type 'Criticidade'
   */
  export type EnumCriticidadeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Criticidade'>
    


  /**
   * Reference to a field of type 'Criticidade[]'
   */
  export type ListEnumCriticidadeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Criticidade[]'>
    


  /**
   * Reference to a field of type 'LogType'
   */
  export type EnumLogTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogType'>
    


  /**
   * Reference to a field of type 'LogType[]'
   */
  export type ListEnumLogTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    status?: EnumStatusFilter<"User"> | $Enums.Status
    avatar?: StringNullableFilter<"User"> | string | null
    lastAccess?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdSoftwares?: SoftwareListRelationFilter
    updatedSoftwares?: SoftwareListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatar?: SortOrderInput | SortOrder
    lastAccess?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdSoftwares?: SoftwareOrderByRelationAggregateInput
    updatedSoftwares?: SoftwareOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    status?: EnumStatusFilter<"User"> | $Enums.Status
    avatar?: StringNullableFilter<"User"> | string | null
    lastAccess?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdSoftwares?: SoftwareListRelationFilter
    updatedSoftwares?: SoftwareListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatar?: SortOrderInput | SortOrder
    lastAccess?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    status?: EnumStatusWithAggregatesFilter<"User"> | $Enums.Status
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastAccess?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SoftwareWhereInput = {
    AND?: SoftwareWhereInput | SoftwareWhereInput[]
    OR?: SoftwareWhereInput[]
    NOT?: SoftwareWhereInput | SoftwareWhereInput[]
    id?: StringFilter<"Software"> | string
    servico?: StringFilter<"Software"> | string
    description?: StringNullableFilter<"Software"> | string | null
    url?: StringNullableFilter<"Software"> | string | null
    hosting?: EnumHostingFilter<"Software"> | $Enums.Hosting
    acesso?: EnumAcessoFilter<"Software"> | $Enums.Acesso
    responsible?: StringNullableFilter<"Software"> | string | null
    namedUser?: EnumNamedUserNullableFilter<"Software"> | $Enums.NamedUser | null
    integratedUser?: EnumIntegratedUserNullableFilter<"Software"> | $Enums.IntegratedUser | null
    sso?: EnumSSOFilter<"Software"> | $Enums.SSO
    onboarding?: StringNullableFilter<"Software"> | string | null
    offboarding?: EnumOffboardingNullableFilter<"Software"> | $Enums.Offboarding | null
    offboardingType?: EnumOffboardingTypeNullableFilter<"Software"> | $Enums.OffboardingType | null
    affectedTeams?: StringNullableListFilter<"Software">
    logsInfo?: EnumLogsInfoNullableFilter<"Software"> | $Enums.LogsInfo | null
    logsRetention?: EnumLogsRetentionNullableFilter<"Software"> | $Enums.LogsRetention | null
    mfaPolicy?: EnumMFAPolicyNullableFilter<"Software"> | $Enums.MFAPolicy | null
    mfa?: EnumMFAFilter<"Software"> | $Enums.MFA
    mfaSMS?: EnumMFASMSNullableFilter<"Software"> | $Enums.MFASMS | null
    regionBlock?: EnumRegionBlockNullableFilter<"Software"> | $Enums.RegionBlock | null
    passwordPolicy?: EnumPasswordPolicyNullableFilter<"Software"> | $Enums.PasswordPolicy | null
    sensitiveData?: EnumSensitiveDataNullableFilter<"Software"> | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFilter<"Software"> | $Enums.Criticidade
    createdAt?: DateTimeFilter<"Software"> | Date | string
    updatedAt?: DateTimeFilter<"Software"> | Date | string
    createdBy?: StringNullableFilter<"Software"> | string | null
    updatedBy?: StringNullableFilter<"Software"> | string | null
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updater?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type SoftwareOrderByWithRelationInput = {
    id?: SortOrder
    servico?: SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    hosting?: SortOrder
    acesso?: SortOrder
    responsible?: SortOrderInput | SortOrder
    namedUser?: SortOrderInput | SortOrder
    integratedUser?: SortOrderInput | SortOrder
    sso?: SortOrder
    onboarding?: SortOrderInput | SortOrder
    offboarding?: SortOrderInput | SortOrder
    offboardingType?: SortOrderInput | SortOrder
    affectedTeams?: SortOrder
    logsInfo?: SortOrderInput | SortOrder
    logsRetention?: SortOrderInput | SortOrder
    mfaPolicy?: SortOrderInput | SortOrder
    mfa?: SortOrder
    mfaSMS?: SortOrderInput | SortOrder
    regionBlock?: SortOrderInput | SortOrder
    passwordPolicy?: SortOrderInput | SortOrder
    sensitiveData?: SortOrderInput | SortOrder
    criticidade?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    creator?: UserOrderByWithRelationInput
    updater?: UserOrderByWithRelationInput
  }

  export type SoftwareWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SoftwareWhereInput | SoftwareWhereInput[]
    OR?: SoftwareWhereInput[]
    NOT?: SoftwareWhereInput | SoftwareWhereInput[]
    servico?: StringFilter<"Software"> | string
    description?: StringNullableFilter<"Software"> | string | null
    url?: StringNullableFilter<"Software"> | string | null
    hosting?: EnumHostingFilter<"Software"> | $Enums.Hosting
    acesso?: EnumAcessoFilter<"Software"> | $Enums.Acesso
    responsible?: StringNullableFilter<"Software"> | string | null
    namedUser?: EnumNamedUserNullableFilter<"Software"> | $Enums.NamedUser | null
    integratedUser?: EnumIntegratedUserNullableFilter<"Software"> | $Enums.IntegratedUser | null
    sso?: EnumSSOFilter<"Software"> | $Enums.SSO
    onboarding?: StringNullableFilter<"Software"> | string | null
    offboarding?: EnumOffboardingNullableFilter<"Software"> | $Enums.Offboarding | null
    offboardingType?: EnumOffboardingTypeNullableFilter<"Software"> | $Enums.OffboardingType | null
    affectedTeams?: StringNullableListFilter<"Software">
    logsInfo?: EnumLogsInfoNullableFilter<"Software"> | $Enums.LogsInfo | null
    logsRetention?: EnumLogsRetentionNullableFilter<"Software"> | $Enums.LogsRetention | null
    mfaPolicy?: EnumMFAPolicyNullableFilter<"Software"> | $Enums.MFAPolicy | null
    mfa?: EnumMFAFilter<"Software"> | $Enums.MFA
    mfaSMS?: EnumMFASMSNullableFilter<"Software"> | $Enums.MFASMS | null
    regionBlock?: EnumRegionBlockNullableFilter<"Software"> | $Enums.RegionBlock | null
    passwordPolicy?: EnumPasswordPolicyNullableFilter<"Software"> | $Enums.PasswordPolicy | null
    sensitiveData?: EnumSensitiveDataNullableFilter<"Software"> | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFilter<"Software"> | $Enums.Criticidade
    createdAt?: DateTimeFilter<"Software"> | Date | string
    updatedAt?: DateTimeFilter<"Software"> | Date | string
    createdBy?: StringNullableFilter<"Software"> | string | null
    updatedBy?: StringNullableFilter<"Software"> | string | null
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updater?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type SoftwareOrderByWithAggregationInput = {
    id?: SortOrder
    servico?: SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    hosting?: SortOrder
    acesso?: SortOrder
    responsible?: SortOrderInput | SortOrder
    namedUser?: SortOrderInput | SortOrder
    integratedUser?: SortOrderInput | SortOrder
    sso?: SortOrder
    onboarding?: SortOrderInput | SortOrder
    offboarding?: SortOrderInput | SortOrder
    offboardingType?: SortOrderInput | SortOrder
    affectedTeams?: SortOrder
    logsInfo?: SortOrderInput | SortOrder
    logsRetention?: SortOrderInput | SortOrder
    mfaPolicy?: SortOrderInput | SortOrder
    mfa?: SortOrder
    mfaSMS?: SortOrderInput | SortOrder
    regionBlock?: SortOrderInput | SortOrder
    passwordPolicy?: SortOrderInput | SortOrder
    sensitiveData?: SortOrderInput | SortOrder
    criticidade?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: SoftwareCountOrderByAggregateInput
    _max?: SoftwareMaxOrderByAggregateInput
    _min?: SoftwareMinOrderByAggregateInput
  }

  export type SoftwareScalarWhereWithAggregatesInput = {
    AND?: SoftwareScalarWhereWithAggregatesInput | SoftwareScalarWhereWithAggregatesInput[]
    OR?: SoftwareScalarWhereWithAggregatesInput[]
    NOT?: SoftwareScalarWhereWithAggregatesInput | SoftwareScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Software"> | string
    servico?: StringWithAggregatesFilter<"Software"> | string
    description?: StringNullableWithAggregatesFilter<"Software"> | string | null
    url?: StringNullableWithAggregatesFilter<"Software"> | string | null
    hosting?: EnumHostingWithAggregatesFilter<"Software"> | $Enums.Hosting
    acesso?: EnumAcessoWithAggregatesFilter<"Software"> | $Enums.Acesso
    responsible?: StringNullableWithAggregatesFilter<"Software"> | string | null
    namedUser?: EnumNamedUserNullableWithAggregatesFilter<"Software"> | $Enums.NamedUser | null
    integratedUser?: EnumIntegratedUserNullableWithAggregatesFilter<"Software"> | $Enums.IntegratedUser | null
    sso?: EnumSSOWithAggregatesFilter<"Software"> | $Enums.SSO
    onboarding?: StringNullableWithAggregatesFilter<"Software"> | string | null
    offboarding?: EnumOffboardingNullableWithAggregatesFilter<"Software"> | $Enums.Offboarding | null
    offboardingType?: EnumOffboardingTypeNullableWithAggregatesFilter<"Software"> | $Enums.OffboardingType | null
    affectedTeams?: StringNullableListFilter<"Software">
    logsInfo?: EnumLogsInfoNullableWithAggregatesFilter<"Software"> | $Enums.LogsInfo | null
    logsRetention?: EnumLogsRetentionNullableWithAggregatesFilter<"Software"> | $Enums.LogsRetention | null
    mfaPolicy?: EnumMFAPolicyNullableWithAggregatesFilter<"Software"> | $Enums.MFAPolicy | null
    mfa?: EnumMFAWithAggregatesFilter<"Software"> | $Enums.MFA
    mfaSMS?: EnumMFASMSNullableWithAggregatesFilter<"Software"> | $Enums.MFASMS | null
    regionBlock?: EnumRegionBlockNullableWithAggregatesFilter<"Software"> | $Enums.RegionBlock | null
    passwordPolicy?: EnumPasswordPolicyNullableWithAggregatesFilter<"Software"> | $Enums.PasswordPolicy | null
    sensitiveData?: EnumSensitiveDataNullableWithAggregatesFilter<"Software"> | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeWithAggregatesFilter<"Software"> | $Enums.Criticidade
    createdAt?: DateTimeWithAggregatesFilter<"Software"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Software"> | Date | string
    createdBy?: StringNullableWithAggregatesFilter<"Software"> | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Software"> | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    userName?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    type?: EnumLogTypeFilter<"AuditLog"> | $Enums.LogType
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringNullableFilter<"AuditLog"> | string | null
    userName?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    type?: EnumLogTypeFilter<"AuditLog"> | $Enums.LogType
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userName?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: StringWithAggregatesFilter<"AuditLog"> | string
    type?: EnumLogTypeWithAggregatesFilter<"AuditLog"> | $Enums.LogType
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status?: $Enums.Status
    avatar?: string | null
    lastAccess?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSoftwares?: SoftwareCreateNestedManyWithoutCreatorInput
    updatedSoftwares?: SoftwareCreateNestedManyWithoutUpdaterInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status?: $Enums.Status
    avatar?: string | null
    lastAccess?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSoftwares?: SoftwareUncheckedCreateNestedManyWithoutCreatorInput
    updatedSoftwares?: SoftwareUncheckedCreateNestedManyWithoutUpdaterInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSoftwares?: SoftwareUpdateManyWithoutCreatorNestedInput
    updatedSoftwares?: SoftwareUpdateManyWithoutUpdaterNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSoftwares?: SoftwareUncheckedUpdateManyWithoutCreatorNestedInput
    updatedSoftwares?: SoftwareUncheckedUpdateManyWithoutUpdaterNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status?: $Enums.Status
    avatar?: string | null
    lastAccess?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareCreateInput = {
    id?: string
    servico: string
    description?: string | null
    url?: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible?: string | null
    namedUser?: $Enums.NamedUser | null
    integratedUser?: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding?: string | null
    offboarding?: $Enums.Offboarding | null
    offboardingType?: $Enums.OffboardingType | null
    affectedTeams?: SoftwareCreateaffectedTeamsInput | string[]
    logsInfo?: $Enums.LogsInfo | null
    logsRetention?: $Enums.LogsRetention | null
    mfaPolicy?: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS?: $Enums.MFASMS | null
    regionBlock?: $Enums.RegionBlock | null
    passwordPolicy?: $Enums.PasswordPolicy | null
    sensitiveData?: $Enums.SensitiveData | null
    criticidade?: $Enums.Criticidade
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedSoftwaresInput
    updater?: UserCreateNestedOneWithoutUpdatedSoftwaresInput
  }

  export type SoftwareUncheckedCreateInput = {
    id?: string
    servico: string
    description?: string | null
    url?: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible?: string | null
    namedUser?: $Enums.NamedUser | null
    integratedUser?: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding?: string | null
    offboarding?: $Enums.Offboarding | null
    offboardingType?: $Enums.OffboardingType | null
    affectedTeams?: SoftwareCreateaffectedTeamsInput | string[]
    logsInfo?: $Enums.LogsInfo | null
    logsRetention?: $Enums.LogsRetention | null
    mfaPolicy?: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS?: $Enums.MFASMS | null
    regionBlock?: $Enums.RegionBlock | null
    passwordPolicy?: $Enums.PasswordPolicy | null
    sensitiveData?: $Enums.SensitiveData | null
    criticidade?: $Enums.Criticidade
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
    updatedBy?: string | null
  }

  export type SoftwareUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedSoftwaresNestedInput
    updater?: UserUpdateOneWithoutUpdatedSoftwaresNestedInput
  }

  export type SoftwareUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareCreateManyInput = {
    id?: string
    servico: string
    description?: string | null
    url?: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible?: string | null
    namedUser?: $Enums.NamedUser | null
    integratedUser?: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding?: string | null
    offboarding?: $Enums.Offboarding | null
    offboardingType?: $Enums.OffboardingType | null
    affectedTeams?: SoftwareCreateaffectedTeamsInput | string[]
    logsInfo?: $Enums.LogsInfo | null
    logsRetention?: $Enums.LogsRetention | null
    mfaPolicy?: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS?: $Enums.MFASMS | null
    regionBlock?: $Enums.RegionBlock | null
    passwordPolicy?: $Enums.PasswordPolicy | null
    sensitiveData?: $Enums.SensitiveData | null
    criticidade?: $Enums.Criticidade
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
    updatedBy?: string | null
  }

  export type SoftwareUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateInput = {
    id?: string
    userName: string
    action: string
    details: string
    type: $Enums.LogType
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    userName: string
    action: string
    details: string
    type: $Enums.LogType
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId?: string | null
    userName: string
    action: string
    details: string
    type: $Enums.LogType
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SoftwareListRelationFilter = {
    every?: SoftwareWhereInput
    some?: SoftwareWhereInput
    none?: SoftwareWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SoftwareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatar?: SortOrder
    lastAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatar?: SortOrder
    lastAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatar?: SortOrder
    lastAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumHostingFilter<$PrismaModel = never> = {
    equals?: $Enums.Hosting | EnumHostingFieldRefInput<$PrismaModel>
    in?: $Enums.Hosting[] | ListEnumHostingFieldRefInput<$PrismaModel>
    notIn?: $Enums.Hosting[] | ListEnumHostingFieldRefInput<$PrismaModel>
    not?: NestedEnumHostingFilter<$PrismaModel> | $Enums.Hosting
  }

  export type EnumAcessoFilter<$PrismaModel = never> = {
    equals?: $Enums.Acesso | EnumAcessoFieldRefInput<$PrismaModel>
    in?: $Enums.Acesso[] | ListEnumAcessoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Acesso[] | ListEnumAcessoFieldRefInput<$PrismaModel>
    not?: NestedEnumAcessoFilter<$PrismaModel> | $Enums.Acesso
  }

  export type EnumNamedUserNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.NamedUser | EnumNamedUserFieldRefInput<$PrismaModel> | null
    in?: $Enums.NamedUser[] | ListEnumNamedUserFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.NamedUser[] | ListEnumNamedUserFieldRefInput<$PrismaModel> | null
    not?: NestedEnumNamedUserNullableFilter<$PrismaModel> | $Enums.NamedUser | null
  }

  export type EnumIntegratedUserNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegratedUser | EnumIntegratedUserFieldRefInput<$PrismaModel> | null
    in?: $Enums.IntegratedUser[] | ListEnumIntegratedUserFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IntegratedUser[] | ListEnumIntegratedUserFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIntegratedUserNullableFilter<$PrismaModel> | $Enums.IntegratedUser | null
  }

  export type EnumSSOFilter<$PrismaModel = never> = {
    equals?: $Enums.SSO | EnumSSOFieldRefInput<$PrismaModel>
    in?: $Enums.SSO[] | ListEnumSSOFieldRefInput<$PrismaModel>
    notIn?: $Enums.SSO[] | ListEnumSSOFieldRefInput<$PrismaModel>
    not?: NestedEnumSSOFilter<$PrismaModel> | $Enums.SSO
  }

  export type EnumOffboardingNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Offboarding | EnumOffboardingFieldRefInput<$PrismaModel> | null
    in?: $Enums.Offboarding[] | ListEnumOffboardingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Offboarding[] | ListEnumOffboardingFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOffboardingNullableFilter<$PrismaModel> | $Enums.Offboarding | null
  }

  export type EnumOffboardingTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OffboardingType | EnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OffboardingType[] | ListEnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OffboardingType[] | ListEnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOffboardingTypeNullableFilter<$PrismaModel> | $Enums.OffboardingType | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumLogsInfoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LogsInfo | EnumLogsInfoFieldRefInput<$PrismaModel> | null
    in?: $Enums.LogsInfo[] | ListEnumLogsInfoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LogsInfo[] | ListEnumLogsInfoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLogsInfoNullableFilter<$PrismaModel> | $Enums.LogsInfo | null
  }

  export type EnumLogsRetentionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LogsRetention | EnumLogsRetentionFieldRefInput<$PrismaModel> | null
    in?: $Enums.LogsRetention[] | ListEnumLogsRetentionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LogsRetention[] | ListEnumLogsRetentionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLogsRetentionNullableFilter<$PrismaModel> | $Enums.LogsRetention | null
  }

  export type EnumMFAPolicyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MFAPolicy | EnumMFAPolicyFieldRefInput<$PrismaModel> | null
    in?: $Enums.MFAPolicy[] | ListEnumMFAPolicyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MFAPolicy[] | ListEnumMFAPolicyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMFAPolicyNullableFilter<$PrismaModel> | $Enums.MFAPolicy | null
  }

  export type EnumMFAFilter<$PrismaModel = never> = {
    equals?: $Enums.MFA | EnumMFAFieldRefInput<$PrismaModel>
    in?: $Enums.MFA[] | ListEnumMFAFieldRefInput<$PrismaModel>
    notIn?: $Enums.MFA[] | ListEnumMFAFieldRefInput<$PrismaModel>
    not?: NestedEnumMFAFilter<$PrismaModel> | $Enums.MFA
  }

  export type EnumMFASMSNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MFASMS | EnumMFASMSFieldRefInput<$PrismaModel> | null
    in?: $Enums.MFASMS[] | ListEnumMFASMSFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MFASMS[] | ListEnumMFASMSFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMFASMSNullableFilter<$PrismaModel> | $Enums.MFASMS | null
  }

  export type EnumRegionBlockNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RegionBlock | EnumRegionBlockFieldRefInput<$PrismaModel> | null
    in?: $Enums.RegionBlock[] | ListEnumRegionBlockFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RegionBlock[] | ListEnumRegionBlockFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRegionBlockNullableFilter<$PrismaModel> | $Enums.RegionBlock | null
  }

  export type EnumPasswordPolicyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PasswordPolicy | EnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    in?: $Enums.PasswordPolicy[] | ListEnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PasswordPolicy[] | ListEnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPasswordPolicyNullableFilter<$PrismaModel> | $Enums.PasswordPolicy | null
  }

  export type EnumSensitiveDataNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.SensitiveData | EnumSensitiveDataFieldRefInput<$PrismaModel> | null
    in?: $Enums.SensitiveData[] | ListEnumSensitiveDataFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SensitiveData[] | ListEnumSensitiveDataFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSensitiveDataNullableFilter<$PrismaModel> | $Enums.SensitiveData | null
  }

  export type EnumCriticidadeFilter<$PrismaModel = never> = {
    equals?: $Enums.Criticidade | EnumCriticidadeFieldRefInput<$PrismaModel>
    in?: $Enums.Criticidade[] | ListEnumCriticidadeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Criticidade[] | ListEnumCriticidadeFieldRefInput<$PrismaModel>
    not?: NestedEnumCriticidadeFilter<$PrismaModel> | $Enums.Criticidade
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SoftwareCountOrderByAggregateInput = {
    id?: SortOrder
    servico?: SortOrder
    description?: SortOrder
    url?: SortOrder
    hosting?: SortOrder
    acesso?: SortOrder
    responsible?: SortOrder
    namedUser?: SortOrder
    integratedUser?: SortOrder
    sso?: SortOrder
    onboarding?: SortOrder
    offboarding?: SortOrder
    offboardingType?: SortOrder
    affectedTeams?: SortOrder
    logsInfo?: SortOrder
    logsRetention?: SortOrder
    mfaPolicy?: SortOrder
    mfa?: SortOrder
    mfaSMS?: SortOrder
    regionBlock?: SortOrder
    passwordPolicy?: SortOrder
    sensitiveData?: SortOrder
    criticidade?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type SoftwareMaxOrderByAggregateInput = {
    id?: SortOrder
    servico?: SortOrder
    description?: SortOrder
    url?: SortOrder
    hosting?: SortOrder
    acesso?: SortOrder
    responsible?: SortOrder
    namedUser?: SortOrder
    integratedUser?: SortOrder
    sso?: SortOrder
    onboarding?: SortOrder
    offboarding?: SortOrder
    offboardingType?: SortOrder
    logsInfo?: SortOrder
    logsRetention?: SortOrder
    mfaPolicy?: SortOrder
    mfa?: SortOrder
    mfaSMS?: SortOrder
    regionBlock?: SortOrder
    passwordPolicy?: SortOrder
    sensitiveData?: SortOrder
    criticidade?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type SoftwareMinOrderByAggregateInput = {
    id?: SortOrder
    servico?: SortOrder
    description?: SortOrder
    url?: SortOrder
    hosting?: SortOrder
    acesso?: SortOrder
    responsible?: SortOrder
    namedUser?: SortOrder
    integratedUser?: SortOrder
    sso?: SortOrder
    onboarding?: SortOrder
    offboarding?: SortOrder
    offboardingType?: SortOrder
    logsInfo?: SortOrder
    logsRetention?: SortOrder
    mfaPolicy?: SortOrder
    mfa?: SortOrder
    mfaSMS?: SortOrder
    regionBlock?: SortOrder
    passwordPolicy?: SortOrder
    sensitiveData?: SortOrder
    criticidade?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnumHostingWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Hosting | EnumHostingFieldRefInput<$PrismaModel>
    in?: $Enums.Hosting[] | ListEnumHostingFieldRefInput<$PrismaModel>
    notIn?: $Enums.Hosting[] | ListEnumHostingFieldRefInput<$PrismaModel>
    not?: NestedEnumHostingWithAggregatesFilter<$PrismaModel> | $Enums.Hosting
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHostingFilter<$PrismaModel>
    _max?: NestedEnumHostingFilter<$PrismaModel>
  }

  export type EnumAcessoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Acesso | EnumAcessoFieldRefInput<$PrismaModel>
    in?: $Enums.Acesso[] | ListEnumAcessoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Acesso[] | ListEnumAcessoFieldRefInput<$PrismaModel>
    not?: NestedEnumAcessoWithAggregatesFilter<$PrismaModel> | $Enums.Acesso
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAcessoFilter<$PrismaModel>
    _max?: NestedEnumAcessoFilter<$PrismaModel>
  }

  export type EnumNamedUserNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NamedUser | EnumNamedUserFieldRefInput<$PrismaModel> | null
    in?: $Enums.NamedUser[] | ListEnumNamedUserFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.NamedUser[] | ListEnumNamedUserFieldRefInput<$PrismaModel> | null
    not?: NestedEnumNamedUserNullableWithAggregatesFilter<$PrismaModel> | $Enums.NamedUser | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumNamedUserNullableFilter<$PrismaModel>
    _max?: NestedEnumNamedUserNullableFilter<$PrismaModel>
  }

  export type EnumIntegratedUserNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegratedUser | EnumIntegratedUserFieldRefInput<$PrismaModel> | null
    in?: $Enums.IntegratedUser[] | ListEnumIntegratedUserFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IntegratedUser[] | ListEnumIntegratedUserFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIntegratedUserNullableWithAggregatesFilter<$PrismaModel> | $Enums.IntegratedUser | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumIntegratedUserNullableFilter<$PrismaModel>
    _max?: NestedEnumIntegratedUserNullableFilter<$PrismaModel>
  }

  export type EnumSSOWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SSO | EnumSSOFieldRefInput<$PrismaModel>
    in?: $Enums.SSO[] | ListEnumSSOFieldRefInput<$PrismaModel>
    notIn?: $Enums.SSO[] | ListEnumSSOFieldRefInput<$PrismaModel>
    not?: NestedEnumSSOWithAggregatesFilter<$PrismaModel> | $Enums.SSO
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSSOFilter<$PrismaModel>
    _max?: NestedEnumSSOFilter<$PrismaModel>
  }

  export type EnumOffboardingNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Offboarding | EnumOffboardingFieldRefInput<$PrismaModel> | null
    in?: $Enums.Offboarding[] | ListEnumOffboardingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Offboarding[] | ListEnumOffboardingFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOffboardingNullableWithAggregatesFilter<$PrismaModel> | $Enums.Offboarding | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOffboardingNullableFilter<$PrismaModel>
    _max?: NestedEnumOffboardingNullableFilter<$PrismaModel>
  }

  export type EnumOffboardingTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OffboardingType | EnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OffboardingType[] | ListEnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OffboardingType[] | ListEnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOffboardingTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.OffboardingType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOffboardingTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumOffboardingTypeNullableFilter<$PrismaModel>
  }

  export type EnumLogsInfoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogsInfo | EnumLogsInfoFieldRefInput<$PrismaModel> | null
    in?: $Enums.LogsInfo[] | ListEnumLogsInfoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LogsInfo[] | ListEnumLogsInfoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLogsInfoNullableWithAggregatesFilter<$PrismaModel> | $Enums.LogsInfo | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLogsInfoNullableFilter<$PrismaModel>
    _max?: NestedEnumLogsInfoNullableFilter<$PrismaModel>
  }

  export type EnumLogsRetentionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogsRetention | EnumLogsRetentionFieldRefInput<$PrismaModel> | null
    in?: $Enums.LogsRetention[] | ListEnumLogsRetentionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LogsRetention[] | ListEnumLogsRetentionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLogsRetentionNullableWithAggregatesFilter<$PrismaModel> | $Enums.LogsRetention | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLogsRetentionNullableFilter<$PrismaModel>
    _max?: NestedEnumLogsRetentionNullableFilter<$PrismaModel>
  }

  export type EnumMFAPolicyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MFAPolicy | EnumMFAPolicyFieldRefInput<$PrismaModel> | null
    in?: $Enums.MFAPolicy[] | ListEnumMFAPolicyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MFAPolicy[] | ListEnumMFAPolicyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMFAPolicyNullableWithAggregatesFilter<$PrismaModel> | $Enums.MFAPolicy | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMFAPolicyNullableFilter<$PrismaModel>
    _max?: NestedEnumMFAPolicyNullableFilter<$PrismaModel>
  }

  export type EnumMFAWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MFA | EnumMFAFieldRefInput<$PrismaModel>
    in?: $Enums.MFA[] | ListEnumMFAFieldRefInput<$PrismaModel>
    notIn?: $Enums.MFA[] | ListEnumMFAFieldRefInput<$PrismaModel>
    not?: NestedEnumMFAWithAggregatesFilter<$PrismaModel> | $Enums.MFA
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMFAFilter<$PrismaModel>
    _max?: NestedEnumMFAFilter<$PrismaModel>
  }

  export type EnumMFASMSNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MFASMS | EnumMFASMSFieldRefInput<$PrismaModel> | null
    in?: $Enums.MFASMS[] | ListEnumMFASMSFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MFASMS[] | ListEnumMFASMSFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMFASMSNullableWithAggregatesFilter<$PrismaModel> | $Enums.MFASMS | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMFASMSNullableFilter<$PrismaModel>
    _max?: NestedEnumMFASMSNullableFilter<$PrismaModel>
  }

  export type EnumRegionBlockNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RegionBlock | EnumRegionBlockFieldRefInput<$PrismaModel> | null
    in?: $Enums.RegionBlock[] | ListEnumRegionBlockFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RegionBlock[] | ListEnumRegionBlockFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRegionBlockNullableWithAggregatesFilter<$PrismaModel> | $Enums.RegionBlock | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRegionBlockNullableFilter<$PrismaModel>
    _max?: NestedEnumRegionBlockNullableFilter<$PrismaModel>
  }

  export type EnumPasswordPolicyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PasswordPolicy | EnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    in?: $Enums.PasswordPolicy[] | ListEnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PasswordPolicy[] | ListEnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPasswordPolicyNullableWithAggregatesFilter<$PrismaModel> | $Enums.PasswordPolicy | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPasswordPolicyNullableFilter<$PrismaModel>
    _max?: NestedEnumPasswordPolicyNullableFilter<$PrismaModel>
  }

  export type EnumSensitiveDataNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SensitiveData | EnumSensitiveDataFieldRefInput<$PrismaModel> | null
    in?: $Enums.SensitiveData[] | ListEnumSensitiveDataFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SensitiveData[] | ListEnumSensitiveDataFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSensitiveDataNullableWithAggregatesFilter<$PrismaModel> | $Enums.SensitiveData | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSensitiveDataNullableFilter<$PrismaModel>
    _max?: NestedEnumSensitiveDataNullableFilter<$PrismaModel>
  }

  export type EnumCriticidadeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Criticidade | EnumCriticidadeFieldRefInput<$PrismaModel>
    in?: $Enums.Criticidade[] | ListEnumCriticidadeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Criticidade[] | ListEnumCriticidadeFieldRefInput<$PrismaModel>
    not?: NestedEnumCriticidadeWithAggregatesFilter<$PrismaModel> | $Enums.Criticidade
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCriticidadeFilter<$PrismaModel>
    _max?: NestedEnumCriticidadeFilter<$PrismaModel>
  }

  export type EnumLogTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogType | EnumLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogTypeFilter<$PrismaModel> | $Enums.LogType
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumLogTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogType | EnumLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogTypeFilter<$PrismaModel>
    _max?: NestedEnumLogTypeFilter<$PrismaModel>
  }

  export type SoftwareCreateNestedManyWithoutCreatorInput = {
    create?: XOR<SoftwareCreateWithoutCreatorInput, SoftwareUncheckedCreateWithoutCreatorInput> | SoftwareCreateWithoutCreatorInput[] | SoftwareUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutCreatorInput | SoftwareCreateOrConnectWithoutCreatorInput[]
    createMany?: SoftwareCreateManyCreatorInputEnvelope
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type SoftwareCreateNestedManyWithoutUpdaterInput = {
    create?: XOR<SoftwareCreateWithoutUpdaterInput, SoftwareUncheckedCreateWithoutUpdaterInput> | SoftwareCreateWithoutUpdaterInput[] | SoftwareUncheckedCreateWithoutUpdaterInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutUpdaterInput | SoftwareCreateOrConnectWithoutUpdaterInput[]
    createMany?: SoftwareCreateManyUpdaterInputEnvelope
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type SoftwareUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<SoftwareCreateWithoutCreatorInput, SoftwareUncheckedCreateWithoutCreatorInput> | SoftwareCreateWithoutCreatorInput[] | SoftwareUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutCreatorInput | SoftwareCreateOrConnectWithoutCreatorInput[]
    createMany?: SoftwareCreateManyCreatorInputEnvelope
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type SoftwareUncheckedCreateNestedManyWithoutUpdaterInput = {
    create?: XOR<SoftwareCreateWithoutUpdaterInput, SoftwareUncheckedCreateWithoutUpdaterInput> | SoftwareCreateWithoutUpdaterInput[] | SoftwareUncheckedCreateWithoutUpdaterInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutUpdaterInput | SoftwareCreateOrConnectWithoutUpdaterInput[]
    createMany?: SoftwareCreateManyUpdaterInputEnvelope
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SoftwareUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<SoftwareCreateWithoutCreatorInput, SoftwareUncheckedCreateWithoutCreatorInput> | SoftwareCreateWithoutCreatorInput[] | SoftwareUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutCreatorInput | SoftwareCreateOrConnectWithoutCreatorInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutCreatorInput | SoftwareUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: SoftwareCreateManyCreatorInputEnvelope
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutCreatorInput | SoftwareUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutCreatorInput | SoftwareUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type SoftwareUpdateManyWithoutUpdaterNestedInput = {
    create?: XOR<SoftwareCreateWithoutUpdaterInput, SoftwareUncheckedCreateWithoutUpdaterInput> | SoftwareCreateWithoutUpdaterInput[] | SoftwareUncheckedCreateWithoutUpdaterInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutUpdaterInput | SoftwareCreateOrConnectWithoutUpdaterInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutUpdaterInput | SoftwareUpsertWithWhereUniqueWithoutUpdaterInput[]
    createMany?: SoftwareCreateManyUpdaterInputEnvelope
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutUpdaterInput | SoftwareUpdateWithWhereUniqueWithoutUpdaterInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutUpdaterInput | SoftwareUpdateManyWithWhereWithoutUpdaterInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type SoftwareUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<SoftwareCreateWithoutCreatorInput, SoftwareUncheckedCreateWithoutCreatorInput> | SoftwareCreateWithoutCreatorInput[] | SoftwareUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutCreatorInput | SoftwareCreateOrConnectWithoutCreatorInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutCreatorInput | SoftwareUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: SoftwareCreateManyCreatorInputEnvelope
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutCreatorInput | SoftwareUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutCreatorInput | SoftwareUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type SoftwareUncheckedUpdateManyWithoutUpdaterNestedInput = {
    create?: XOR<SoftwareCreateWithoutUpdaterInput, SoftwareUncheckedCreateWithoutUpdaterInput> | SoftwareCreateWithoutUpdaterInput[] | SoftwareUncheckedCreateWithoutUpdaterInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutUpdaterInput | SoftwareCreateOrConnectWithoutUpdaterInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutUpdaterInput | SoftwareUpsertWithWhereUniqueWithoutUpdaterInput[]
    createMany?: SoftwareCreateManyUpdaterInputEnvelope
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutUpdaterInput | SoftwareUpdateWithWhereUniqueWithoutUpdaterInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutUpdaterInput | SoftwareUpdateManyWithWhereWithoutUpdaterInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type SoftwareCreateaffectedTeamsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutCreatedSoftwaresInput = {
    create?: XOR<UserCreateWithoutCreatedSoftwaresInput, UserUncheckedCreateWithoutCreatedSoftwaresInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSoftwaresInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedSoftwaresInput = {
    create?: XOR<UserCreateWithoutUpdatedSoftwaresInput, UserUncheckedCreateWithoutUpdatedSoftwaresInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedSoftwaresInput
    connect?: UserWhereUniqueInput
  }

  export type EnumHostingFieldUpdateOperationsInput = {
    set?: $Enums.Hosting
  }

  export type EnumAcessoFieldUpdateOperationsInput = {
    set?: $Enums.Acesso
  }

  export type NullableEnumNamedUserFieldUpdateOperationsInput = {
    set?: $Enums.NamedUser | null
  }

  export type NullableEnumIntegratedUserFieldUpdateOperationsInput = {
    set?: $Enums.IntegratedUser | null
  }

  export type EnumSSOFieldUpdateOperationsInput = {
    set?: $Enums.SSO
  }

  export type NullableEnumOffboardingFieldUpdateOperationsInput = {
    set?: $Enums.Offboarding | null
  }

  export type NullableEnumOffboardingTypeFieldUpdateOperationsInput = {
    set?: $Enums.OffboardingType | null
  }

  export type SoftwareUpdateaffectedTeamsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableEnumLogsInfoFieldUpdateOperationsInput = {
    set?: $Enums.LogsInfo | null
  }

  export type NullableEnumLogsRetentionFieldUpdateOperationsInput = {
    set?: $Enums.LogsRetention | null
  }

  export type NullableEnumMFAPolicyFieldUpdateOperationsInput = {
    set?: $Enums.MFAPolicy | null
  }

  export type EnumMFAFieldUpdateOperationsInput = {
    set?: $Enums.MFA
  }

  export type NullableEnumMFASMSFieldUpdateOperationsInput = {
    set?: $Enums.MFASMS | null
  }

  export type NullableEnumRegionBlockFieldUpdateOperationsInput = {
    set?: $Enums.RegionBlock | null
  }

  export type NullableEnumPasswordPolicyFieldUpdateOperationsInput = {
    set?: $Enums.PasswordPolicy | null
  }

  export type NullableEnumSensitiveDataFieldUpdateOperationsInput = {
    set?: $Enums.SensitiveData | null
  }

  export type EnumCriticidadeFieldUpdateOperationsInput = {
    set?: $Enums.Criticidade
  }

  export type UserUpdateOneWithoutCreatedSoftwaresNestedInput = {
    create?: XOR<UserCreateWithoutCreatedSoftwaresInput, UserUncheckedCreateWithoutCreatedSoftwaresInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSoftwaresInput
    upsert?: UserUpsertWithoutCreatedSoftwaresInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedSoftwaresInput, UserUpdateWithoutCreatedSoftwaresInput>, UserUncheckedUpdateWithoutCreatedSoftwaresInput>
  }

  export type UserUpdateOneWithoutUpdatedSoftwaresNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedSoftwaresInput, UserUncheckedCreateWithoutUpdatedSoftwaresInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedSoftwaresInput
    upsert?: UserUpsertWithoutUpdatedSoftwaresInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedSoftwaresInput, UserUpdateWithoutUpdatedSoftwaresInput>, UserUncheckedUpdateWithoutUpdatedSoftwaresInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumLogTypeFieldUpdateOperationsInput = {
    set?: $Enums.LogType
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumHostingFilter<$PrismaModel = never> = {
    equals?: $Enums.Hosting | EnumHostingFieldRefInput<$PrismaModel>
    in?: $Enums.Hosting[] | ListEnumHostingFieldRefInput<$PrismaModel>
    notIn?: $Enums.Hosting[] | ListEnumHostingFieldRefInput<$PrismaModel>
    not?: NestedEnumHostingFilter<$PrismaModel> | $Enums.Hosting
  }

  export type NestedEnumAcessoFilter<$PrismaModel = never> = {
    equals?: $Enums.Acesso | EnumAcessoFieldRefInput<$PrismaModel>
    in?: $Enums.Acesso[] | ListEnumAcessoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Acesso[] | ListEnumAcessoFieldRefInput<$PrismaModel>
    not?: NestedEnumAcessoFilter<$PrismaModel> | $Enums.Acesso
  }

  export type NestedEnumNamedUserNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.NamedUser | EnumNamedUserFieldRefInput<$PrismaModel> | null
    in?: $Enums.NamedUser[] | ListEnumNamedUserFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.NamedUser[] | ListEnumNamedUserFieldRefInput<$PrismaModel> | null
    not?: NestedEnumNamedUserNullableFilter<$PrismaModel> | $Enums.NamedUser | null
  }

  export type NestedEnumIntegratedUserNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegratedUser | EnumIntegratedUserFieldRefInput<$PrismaModel> | null
    in?: $Enums.IntegratedUser[] | ListEnumIntegratedUserFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IntegratedUser[] | ListEnumIntegratedUserFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIntegratedUserNullableFilter<$PrismaModel> | $Enums.IntegratedUser | null
  }

  export type NestedEnumSSOFilter<$PrismaModel = never> = {
    equals?: $Enums.SSO | EnumSSOFieldRefInput<$PrismaModel>
    in?: $Enums.SSO[] | ListEnumSSOFieldRefInput<$PrismaModel>
    notIn?: $Enums.SSO[] | ListEnumSSOFieldRefInput<$PrismaModel>
    not?: NestedEnumSSOFilter<$PrismaModel> | $Enums.SSO
  }

  export type NestedEnumOffboardingNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Offboarding | EnumOffboardingFieldRefInput<$PrismaModel> | null
    in?: $Enums.Offboarding[] | ListEnumOffboardingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Offboarding[] | ListEnumOffboardingFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOffboardingNullableFilter<$PrismaModel> | $Enums.Offboarding | null
  }

  export type NestedEnumOffboardingTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OffboardingType | EnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OffboardingType[] | ListEnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OffboardingType[] | ListEnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOffboardingTypeNullableFilter<$PrismaModel> | $Enums.OffboardingType | null
  }

  export type NestedEnumLogsInfoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LogsInfo | EnumLogsInfoFieldRefInput<$PrismaModel> | null
    in?: $Enums.LogsInfo[] | ListEnumLogsInfoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LogsInfo[] | ListEnumLogsInfoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLogsInfoNullableFilter<$PrismaModel> | $Enums.LogsInfo | null
  }

  export type NestedEnumLogsRetentionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LogsRetention | EnumLogsRetentionFieldRefInput<$PrismaModel> | null
    in?: $Enums.LogsRetention[] | ListEnumLogsRetentionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LogsRetention[] | ListEnumLogsRetentionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLogsRetentionNullableFilter<$PrismaModel> | $Enums.LogsRetention | null
  }

  export type NestedEnumMFAPolicyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MFAPolicy | EnumMFAPolicyFieldRefInput<$PrismaModel> | null
    in?: $Enums.MFAPolicy[] | ListEnumMFAPolicyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MFAPolicy[] | ListEnumMFAPolicyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMFAPolicyNullableFilter<$PrismaModel> | $Enums.MFAPolicy | null
  }

  export type NestedEnumMFAFilter<$PrismaModel = never> = {
    equals?: $Enums.MFA | EnumMFAFieldRefInput<$PrismaModel>
    in?: $Enums.MFA[] | ListEnumMFAFieldRefInput<$PrismaModel>
    notIn?: $Enums.MFA[] | ListEnumMFAFieldRefInput<$PrismaModel>
    not?: NestedEnumMFAFilter<$PrismaModel> | $Enums.MFA
  }

  export type NestedEnumMFASMSNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MFASMS | EnumMFASMSFieldRefInput<$PrismaModel> | null
    in?: $Enums.MFASMS[] | ListEnumMFASMSFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MFASMS[] | ListEnumMFASMSFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMFASMSNullableFilter<$PrismaModel> | $Enums.MFASMS | null
  }

  export type NestedEnumRegionBlockNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RegionBlock | EnumRegionBlockFieldRefInput<$PrismaModel> | null
    in?: $Enums.RegionBlock[] | ListEnumRegionBlockFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RegionBlock[] | ListEnumRegionBlockFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRegionBlockNullableFilter<$PrismaModel> | $Enums.RegionBlock | null
  }

  export type NestedEnumPasswordPolicyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PasswordPolicy | EnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    in?: $Enums.PasswordPolicy[] | ListEnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PasswordPolicy[] | ListEnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPasswordPolicyNullableFilter<$PrismaModel> | $Enums.PasswordPolicy | null
  }

  export type NestedEnumSensitiveDataNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.SensitiveData | EnumSensitiveDataFieldRefInput<$PrismaModel> | null
    in?: $Enums.SensitiveData[] | ListEnumSensitiveDataFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SensitiveData[] | ListEnumSensitiveDataFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSensitiveDataNullableFilter<$PrismaModel> | $Enums.SensitiveData | null
  }

  export type NestedEnumCriticidadeFilter<$PrismaModel = never> = {
    equals?: $Enums.Criticidade | EnumCriticidadeFieldRefInput<$PrismaModel>
    in?: $Enums.Criticidade[] | ListEnumCriticidadeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Criticidade[] | ListEnumCriticidadeFieldRefInput<$PrismaModel>
    not?: NestedEnumCriticidadeFilter<$PrismaModel> | $Enums.Criticidade
  }

  export type NestedEnumHostingWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Hosting | EnumHostingFieldRefInput<$PrismaModel>
    in?: $Enums.Hosting[] | ListEnumHostingFieldRefInput<$PrismaModel>
    notIn?: $Enums.Hosting[] | ListEnumHostingFieldRefInput<$PrismaModel>
    not?: NestedEnumHostingWithAggregatesFilter<$PrismaModel> | $Enums.Hosting
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHostingFilter<$PrismaModel>
    _max?: NestedEnumHostingFilter<$PrismaModel>
  }

  export type NestedEnumAcessoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Acesso | EnumAcessoFieldRefInput<$PrismaModel>
    in?: $Enums.Acesso[] | ListEnumAcessoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Acesso[] | ListEnumAcessoFieldRefInput<$PrismaModel>
    not?: NestedEnumAcessoWithAggregatesFilter<$PrismaModel> | $Enums.Acesso
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAcessoFilter<$PrismaModel>
    _max?: NestedEnumAcessoFilter<$PrismaModel>
  }

  export type NestedEnumNamedUserNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NamedUser | EnumNamedUserFieldRefInput<$PrismaModel> | null
    in?: $Enums.NamedUser[] | ListEnumNamedUserFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.NamedUser[] | ListEnumNamedUserFieldRefInput<$PrismaModel> | null
    not?: NestedEnumNamedUserNullableWithAggregatesFilter<$PrismaModel> | $Enums.NamedUser | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumNamedUserNullableFilter<$PrismaModel>
    _max?: NestedEnumNamedUserNullableFilter<$PrismaModel>
  }

  export type NestedEnumIntegratedUserNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegratedUser | EnumIntegratedUserFieldRefInput<$PrismaModel> | null
    in?: $Enums.IntegratedUser[] | ListEnumIntegratedUserFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IntegratedUser[] | ListEnumIntegratedUserFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIntegratedUserNullableWithAggregatesFilter<$PrismaModel> | $Enums.IntegratedUser | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumIntegratedUserNullableFilter<$PrismaModel>
    _max?: NestedEnumIntegratedUserNullableFilter<$PrismaModel>
  }

  export type NestedEnumSSOWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SSO | EnumSSOFieldRefInput<$PrismaModel>
    in?: $Enums.SSO[] | ListEnumSSOFieldRefInput<$PrismaModel>
    notIn?: $Enums.SSO[] | ListEnumSSOFieldRefInput<$PrismaModel>
    not?: NestedEnumSSOWithAggregatesFilter<$PrismaModel> | $Enums.SSO
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSSOFilter<$PrismaModel>
    _max?: NestedEnumSSOFilter<$PrismaModel>
  }

  export type NestedEnumOffboardingNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Offboarding | EnumOffboardingFieldRefInput<$PrismaModel> | null
    in?: $Enums.Offboarding[] | ListEnumOffboardingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Offboarding[] | ListEnumOffboardingFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOffboardingNullableWithAggregatesFilter<$PrismaModel> | $Enums.Offboarding | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOffboardingNullableFilter<$PrismaModel>
    _max?: NestedEnumOffboardingNullableFilter<$PrismaModel>
  }

  export type NestedEnumOffboardingTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OffboardingType | EnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OffboardingType[] | ListEnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OffboardingType[] | ListEnumOffboardingTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOffboardingTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.OffboardingType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOffboardingTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumOffboardingTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumLogsInfoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogsInfo | EnumLogsInfoFieldRefInput<$PrismaModel> | null
    in?: $Enums.LogsInfo[] | ListEnumLogsInfoFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LogsInfo[] | ListEnumLogsInfoFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLogsInfoNullableWithAggregatesFilter<$PrismaModel> | $Enums.LogsInfo | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLogsInfoNullableFilter<$PrismaModel>
    _max?: NestedEnumLogsInfoNullableFilter<$PrismaModel>
  }

  export type NestedEnumLogsRetentionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogsRetention | EnumLogsRetentionFieldRefInput<$PrismaModel> | null
    in?: $Enums.LogsRetention[] | ListEnumLogsRetentionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LogsRetention[] | ListEnumLogsRetentionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLogsRetentionNullableWithAggregatesFilter<$PrismaModel> | $Enums.LogsRetention | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLogsRetentionNullableFilter<$PrismaModel>
    _max?: NestedEnumLogsRetentionNullableFilter<$PrismaModel>
  }

  export type NestedEnumMFAPolicyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MFAPolicy | EnumMFAPolicyFieldRefInput<$PrismaModel> | null
    in?: $Enums.MFAPolicy[] | ListEnumMFAPolicyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MFAPolicy[] | ListEnumMFAPolicyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMFAPolicyNullableWithAggregatesFilter<$PrismaModel> | $Enums.MFAPolicy | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMFAPolicyNullableFilter<$PrismaModel>
    _max?: NestedEnumMFAPolicyNullableFilter<$PrismaModel>
  }

  export type NestedEnumMFAWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MFA | EnumMFAFieldRefInput<$PrismaModel>
    in?: $Enums.MFA[] | ListEnumMFAFieldRefInput<$PrismaModel>
    notIn?: $Enums.MFA[] | ListEnumMFAFieldRefInput<$PrismaModel>
    not?: NestedEnumMFAWithAggregatesFilter<$PrismaModel> | $Enums.MFA
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMFAFilter<$PrismaModel>
    _max?: NestedEnumMFAFilter<$PrismaModel>
  }

  export type NestedEnumMFASMSNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MFASMS | EnumMFASMSFieldRefInput<$PrismaModel> | null
    in?: $Enums.MFASMS[] | ListEnumMFASMSFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MFASMS[] | ListEnumMFASMSFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMFASMSNullableWithAggregatesFilter<$PrismaModel> | $Enums.MFASMS | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMFASMSNullableFilter<$PrismaModel>
    _max?: NestedEnumMFASMSNullableFilter<$PrismaModel>
  }

  export type NestedEnumRegionBlockNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RegionBlock | EnumRegionBlockFieldRefInput<$PrismaModel> | null
    in?: $Enums.RegionBlock[] | ListEnumRegionBlockFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RegionBlock[] | ListEnumRegionBlockFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRegionBlockNullableWithAggregatesFilter<$PrismaModel> | $Enums.RegionBlock | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRegionBlockNullableFilter<$PrismaModel>
    _max?: NestedEnumRegionBlockNullableFilter<$PrismaModel>
  }

  export type NestedEnumPasswordPolicyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PasswordPolicy | EnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    in?: $Enums.PasswordPolicy[] | ListEnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PasswordPolicy[] | ListEnumPasswordPolicyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPasswordPolicyNullableWithAggregatesFilter<$PrismaModel> | $Enums.PasswordPolicy | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPasswordPolicyNullableFilter<$PrismaModel>
    _max?: NestedEnumPasswordPolicyNullableFilter<$PrismaModel>
  }

  export type NestedEnumSensitiveDataNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SensitiveData | EnumSensitiveDataFieldRefInput<$PrismaModel> | null
    in?: $Enums.SensitiveData[] | ListEnumSensitiveDataFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SensitiveData[] | ListEnumSensitiveDataFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSensitiveDataNullableWithAggregatesFilter<$PrismaModel> | $Enums.SensitiveData | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSensitiveDataNullableFilter<$PrismaModel>
    _max?: NestedEnumSensitiveDataNullableFilter<$PrismaModel>
  }

  export type NestedEnumCriticidadeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Criticidade | EnumCriticidadeFieldRefInput<$PrismaModel>
    in?: $Enums.Criticidade[] | ListEnumCriticidadeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Criticidade[] | ListEnumCriticidadeFieldRefInput<$PrismaModel>
    not?: NestedEnumCriticidadeWithAggregatesFilter<$PrismaModel> | $Enums.Criticidade
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCriticidadeFilter<$PrismaModel>
    _max?: NestedEnumCriticidadeFilter<$PrismaModel>
  }

  export type NestedEnumLogTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogType | EnumLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogTypeFilter<$PrismaModel> | $Enums.LogType
  }

  export type NestedEnumLogTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogType | EnumLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogTypeFilter<$PrismaModel>
    _max?: NestedEnumLogTypeFilter<$PrismaModel>
  }

  export type SoftwareCreateWithoutCreatorInput = {
    id?: string
    servico: string
    description?: string | null
    url?: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible?: string | null
    namedUser?: $Enums.NamedUser | null
    integratedUser?: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding?: string | null
    offboarding?: $Enums.Offboarding | null
    offboardingType?: $Enums.OffboardingType | null
    affectedTeams?: SoftwareCreateaffectedTeamsInput | string[]
    logsInfo?: $Enums.LogsInfo | null
    logsRetention?: $Enums.LogsRetention | null
    mfaPolicy?: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS?: $Enums.MFASMS | null
    regionBlock?: $Enums.RegionBlock | null
    passwordPolicy?: $Enums.PasswordPolicy | null
    sensitiveData?: $Enums.SensitiveData | null
    criticidade?: $Enums.Criticidade
    createdAt?: Date | string
    updatedAt?: Date | string
    updater?: UserCreateNestedOneWithoutUpdatedSoftwaresInput
  }

  export type SoftwareUncheckedCreateWithoutCreatorInput = {
    id?: string
    servico: string
    description?: string | null
    url?: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible?: string | null
    namedUser?: $Enums.NamedUser | null
    integratedUser?: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding?: string | null
    offboarding?: $Enums.Offboarding | null
    offboardingType?: $Enums.OffboardingType | null
    affectedTeams?: SoftwareCreateaffectedTeamsInput | string[]
    logsInfo?: $Enums.LogsInfo | null
    logsRetention?: $Enums.LogsRetention | null
    mfaPolicy?: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS?: $Enums.MFASMS | null
    regionBlock?: $Enums.RegionBlock | null
    passwordPolicy?: $Enums.PasswordPolicy | null
    sensitiveData?: $Enums.SensitiveData | null
    criticidade?: $Enums.Criticidade
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: string | null
  }

  export type SoftwareCreateOrConnectWithoutCreatorInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutCreatorInput, SoftwareUncheckedCreateWithoutCreatorInput>
  }

  export type SoftwareCreateManyCreatorInputEnvelope = {
    data: SoftwareCreateManyCreatorInput | SoftwareCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareCreateWithoutUpdaterInput = {
    id?: string
    servico: string
    description?: string | null
    url?: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible?: string | null
    namedUser?: $Enums.NamedUser | null
    integratedUser?: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding?: string | null
    offboarding?: $Enums.Offboarding | null
    offboardingType?: $Enums.OffboardingType | null
    affectedTeams?: SoftwareCreateaffectedTeamsInput | string[]
    logsInfo?: $Enums.LogsInfo | null
    logsRetention?: $Enums.LogsRetention | null
    mfaPolicy?: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS?: $Enums.MFASMS | null
    regionBlock?: $Enums.RegionBlock | null
    passwordPolicy?: $Enums.PasswordPolicy | null
    sensitiveData?: $Enums.SensitiveData | null
    criticidade?: $Enums.Criticidade
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedSoftwaresInput
  }

  export type SoftwareUncheckedCreateWithoutUpdaterInput = {
    id?: string
    servico: string
    description?: string | null
    url?: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible?: string | null
    namedUser?: $Enums.NamedUser | null
    integratedUser?: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding?: string | null
    offboarding?: $Enums.Offboarding | null
    offboardingType?: $Enums.OffboardingType | null
    affectedTeams?: SoftwareCreateaffectedTeamsInput | string[]
    logsInfo?: $Enums.LogsInfo | null
    logsRetention?: $Enums.LogsRetention | null
    mfaPolicy?: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS?: $Enums.MFASMS | null
    regionBlock?: $Enums.RegionBlock | null
    passwordPolicy?: $Enums.PasswordPolicy | null
    sensitiveData?: $Enums.SensitiveData | null
    criticidade?: $Enums.Criticidade
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
  }

  export type SoftwareCreateOrConnectWithoutUpdaterInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutUpdaterInput, SoftwareUncheckedCreateWithoutUpdaterInput>
  }

  export type SoftwareCreateManyUpdaterInputEnvelope = {
    data: SoftwareCreateManyUpdaterInput | SoftwareCreateManyUpdaterInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    userName: string
    action: string
    details: string
    type: $Enums.LogType
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    userName: string
    action: string
    details: string
    type: $Enums.LogType
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareUpsertWithWhereUniqueWithoutCreatorInput = {
    where: SoftwareWhereUniqueInput
    update: XOR<SoftwareUpdateWithoutCreatorInput, SoftwareUncheckedUpdateWithoutCreatorInput>
    create: XOR<SoftwareCreateWithoutCreatorInput, SoftwareUncheckedCreateWithoutCreatorInput>
  }

  export type SoftwareUpdateWithWhereUniqueWithoutCreatorInput = {
    where: SoftwareWhereUniqueInput
    data: XOR<SoftwareUpdateWithoutCreatorInput, SoftwareUncheckedUpdateWithoutCreatorInput>
  }

  export type SoftwareUpdateManyWithWhereWithoutCreatorInput = {
    where: SoftwareScalarWhereInput
    data: XOR<SoftwareUpdateManyMutationInput, SoftwareUncheckedUpdateManyWithoutCreatorInput>
  }

  export type SoftwareScalarWhereInput = {
    AND?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
    OR?: SoftwareScalarWhereInput[]
    NOT?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
    id?: StringFilter<"Software"> | string
    servico?: StringFilter<"Software"> | string
    description?: StringNullableFilter<"Software"> | string | null
    url?: StringNullableFilter<"Software"> | string | null
    hosting?: EnumHostingFilter<"Software"> | $Enums.Hosting
    acesso?: EnumAcessoFilter<"Software"> | $Enums.Acesso
    responsible?: StringNullableFilter<"Software"> | string | null
    namedUser?: EnumNamedUserNullableFilter<"Software"> | $Enums.NamedUser | null
    integratedUser?: EnumIntegratedUserNullableFilter<"Software"> | $Enums.IntegratedUser | null
    sso?: EnumSSOFilter<"Software"> | $Enums.SSO
    onboarding?: StringNullableFilter<"Software"> | string | null
    offboarding?: EnumOffboardingNullableFilter<"Software"> | $Enums.Offboarding | null
    offboardingType?: EnumOffboardingTypeNullableFilter<"Software"> | $Enums.OffboardingType | null
    affectedTeams?: StringNullableListFilter<"Software">
    logsInfo?: EnumLogsInfoNullableFilter<"Software"> | $Enums.LogsInfo | null
    logsRetention?: EnumLogsRetentionNullableFilter<"Software"> | $Enums.LogsRetention | null
    mfaPolicy?: EnumMFAPolicyNullableFilter<"Software"> | $Enums.MFAPolicy | null
    mfa?: EnumMFAFilter<"Software"> | $Enums.MFA
    mfaSMS?: EnumMFASMSNullableFilter<"Software"> | $Enums.MFASMS | null
    regionBlock?: EnumRegionBlockNullableFilter<"Software"> | $Enums.RegionBlock | null
    passwordPolicy?: EnumPasswordPolicyNullableFilter<"Software"> | $Enums.PasswordPolicy | null
    sensitiveData?: EnumSensitiveDataNullableFilter<"Software"> | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFilter<"Software"> | $Enums.Criticidade
    createdAt?: DateTimeFilter<"Software"> | Date | string
    updatedAt?: DateTimeFilter<"Software"> | Date | string
    createdBy?: StringNullableFilter<"Software"> | string | null
    updatedBy?: StringNullableFilter<"Software"> | string | null
  }

  export type SoftwareUpsertWithWhereUniqueWithoutUpdaterInput = {
    where: SoftwareWhereUniqueInput
    update: XOR<SoftwareUpdateWithoutUpdaterInput, SoftwareUncheckedUpdateWithoutUpdaterInput>
    create: XOR<SoftwareCreateWithoutUpdaterInput, SoftwareUncheckedCreateWithoutUpdaterInput>
  }

  export type SoftwareUpdateWithWhereUniqueWithoutUpdaterInput = {
    where: SoftwareWhereUniqueInput
    data: XOR<SoftwareUpdateWithoutUpdaterInput, SoftwareUncheckedUpdateWithoutUpdaterInput>
  }

  export type SoftwareUpdateManyWithWhereWithoutUpdaterInput = {
    where: SoftwareScalarWhereInput
    data: XOR<SoftwareUpdateManyMutationInput, SoftwareUncheckedUpdateManyWithoutUpdaterInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    userName?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    type?: EnumLogTypeFilter<"AuditLog"> | $Enums.LogType
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserCreateWithoutCreatedSoftwaresInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status?: $Enums.Status
    avatar?: string | null
    lastAccess?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSoftwares?: SoftwareCreateNestedManyWithoutUpdaterInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedSoftwaresInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status?: $Enums.Status
    avatar?: string | null
    lastAccess?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSoftwares?: SoftwareUncheckedCreateNestedManyWithoutUpdaterInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedSoftwaresInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedSoftwaresInput, UserUncheckedCreateWithoutCreatedSoftwaresInput>
  }

  export type UserCreateWithoutUpdatedSoftwaresInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status?: $Enums.Status
    avatar?: string | null
    lastAccess?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSoftwares?: SoftwareCreateNestedManyWithoutCreatorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedSoftwaresInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status?: $Enums.Status
    avatar?: string | null
    lastAccess?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSoftwares?: SoftwareUncheckedCreateNestedManyWithoutCreatorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedSoftwaresInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedSoftwaresInput, UserUncheckedCreateWithoutUpdatedSoftwaresInput>
  }

  export type UserUpsertWithoutCreatedSoftwaresInput = {
    update: XOR<UserUpdateWithoutCreatedSoftwaresInput, UserUncheckedUpdateWithoutCreatedSoftwaresInput>
    create: XOR<UserCreateWithoutCreatedSoftwaresInput, UserUncheckedCreateWithoutCreatedSoftwaresInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedSoftwaresInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedSoftwaresInput, UserUncheckedUpdateWithoutCreatedSoftwaresInput>
  }

  export type UserUpdateWithoutCreatedSoftwaresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSoftwares?: SoftwareUpdateManyWithoutUpdaterNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedSoftwaresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSoftwares?: SoftwareUncheckedUpdateManyWithoutUpdaterNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedSoftwaresInput = {
    update: XOR<UserUpdateWithoutUpdatedSoftwaresInput, UserUncheckedUpdateWithoutUpdatedSoftwaresInput>
    create: XOR<UserCreateWithoutUpdatedSoftwaresInput, UserUncheckedCreateWithoutUpdatedSoftwaresInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedSoftwaresInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedSoftwaresInput, UserUncheckedUpdateWithoutUpdatedSoftwaresInput>
  }

  export type UserUpdateWithoutUpdatedSoftwaresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSoftwares?: SoftwareUpdateManyWithoutCreatorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedSoftwaresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSoftwares?: SoftwareUncheckedUpdateManyWithoutCreatorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status?: $Enums.Status
    avatar?: string | null
    lastAccess?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSoftwares?: SoftwareCreateNestedManyWithoutCreatorInput
    updatedSoftwares?: SoftwareCreateNestedManyWithoutUpdaterInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    status?: $Enums.Status
    avatar?: string | null
    lastAccess?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSoftwares?: SoftwareUncheckedCreateNestedManyWithoutCreatorInput
    updatedSoftwares?: SoftwareUncheckedCreateNestedManyWithoutUpdaterInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSoftwares?: SoftwareUpdateManyWithoutCreatorNestedInput
    updatedSoftwares?: SoftwareUpdateManyWithoutUpdaterNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastAccess?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSoftwares?: SoftwareUncheckedUpdateManyWithoutCreatorNestedInput
    updatedSoftwares?: SoftwareUncheckedUpdateManyWithoutUpdaterNestedInput
  }

  export type SoftwareCreateManyCreatorInput = {
    id?: string
    servico: string
    description?: string | null
    url?: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible?: string | null
    namedUser?: $Enums.NamedUser | null
    integratedUser?: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding?: string | null
    offboarding?: $Enums.Offboarding | null
    offboardingType?: $Enums.OffboardingType | null
    affectedTeams?: SoftwareCreateaffectedTeamsInput | string[]
    logsInfo?: $Enums.LogsInfo | null
    logsRetention?: $Enums.LogsRetention | null
    mfaPolicy?: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS?: $Enums.MFASMS | null
    regionBlock?: $Enums.RegionBlock | null
    passwordPolicy?: $Enums.PasswordPolicy | null
    sensitiveData?: $Enums.SensitiveData | null
    criticidade?: $Enums.Criticidade
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: string | null
  }

  export type SoftwareCreateManyUpdaterInput = {
    id?: string
    servico: string
    description?: string | null
    url?: string | null
    hosting: $Enums.Hosting
    acesso: $Enums.Acesso
    responsible?: string | null
    namedUser?: $Enums.NamedUser | null
    integratedUser?: $Enums.IntegratedUser | null
    sso: $Enums.SSO
    onboarding?: string | null
    offboarding?: $Enums.Offboarding | null
    offboardingType?: $Enums.OffboardingType | null
    affectedTeams?: SoftwareCreateaffectedTeamsInput | string[]
    logsInfo?: $Enums.LogsInfo | null
    logsRetention?: $Enums.LogsRetention | null
    mfaPolicy?: $Enums.MFAPolicy | null
    mfa: $Enums.MFA
    mfaSMS?: $Enums.MFASMS | null
    regionBlock?: $Enums.RegionBlock | null
    passwordPolicy?: $Enums.PasswordPolicy | null
    sensitiveData?: $Enums.SensitiveData | null
    criticidade?: $Enums.Criticidade
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    userName: string
    action: string
    details: string
    type: $Enums.LogType
    createdAt?: Date | string
  }

  export type SoftwareUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updater?: UserUpdateOneWithoutUpdatedSoftwaresNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareUpdateWithoutUpdaterInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedSoftwaresNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutUpdaterInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareUncheckedUpdateManyWithoutUpdaterInput = {
    id?: StringFieldUpdateOperationsInput | string
    servico?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    hosting?: EnumHostingFieldUpdateOperationsInput | $Enums.Hosting
    acesso?: EnumAcessoFieldUpdateOperationsInput | $Enums.Acesso
    responsible?: NullableStringFieldUpdateOperationsInput | string | null
    namedUser?: NullableEnumNamedUserFieldUpdateOperationsInput | $Enums.NamedUser | null
    integratedUser?: NullableEnumIntegratedUserFieldUpdateOperationsInput | $Enums.IntegratedUser | null
    sso?: EnumSSOFieldUpdateOperationsInput | $Enums.SSO
    onboarding?: NullableStringFieldUpdateOperationsInput | string | null
    offboarding?: NullableEnumOffboardingFieldUpdateOperationsInput | $Enums.Offboarding | null
    offboardingType?: NullableEnumOffboardingTypeFieldUpdateOperationsInput | $Enums.OffboardingType | null
    affectedTeams?: SoftwareUpdateaffectedTeamsInput | string[]
    logsInfo?: NullableEnumLogsInfoFieldUpdateOperationsInput | $Enums.LogsInfo | null
    logsRetention?: NullableEnumLogsRetentionFieldUpdateOperationsInput | $Enums.LogsRetention | null
    mfaPolicy?: NullableEnumMFAPolicyFieldUpdateOperationsInput | $Enums.MFAPolicy | null
    mfa?: EnumMFAFieldUpdateOperationsInput | $Enums.MFA
    mfaSMS?: NullableEnumMFASMSFieldUpdateOperationsInput | $Enums.MFASMS | null
    regionBlock?: NullableEnumRegionBlockFieldUpdateOperationsInput | $Enums.RegionBlock | null
    passwordPolicy?: NullableEnumPasswordPolicyFieldUpdateOperationsInput | $Enums.PasswordPolicy | null
    sensitiveData?: NullableEnumSensitiveDataFieldUpdateOperationsInput | $Enums.SensitiveData | null
    criticidade?: EnumCriticidadeFieldUpdateOperationsInput | $Enums.Criticidade
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoftwareDefaultArgs instead
     */
    export type SoftwareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoftwareDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}